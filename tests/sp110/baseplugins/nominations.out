public PlVers:__version =
{
	version = 5,
	filevers = "1.10.0.6484",
	date = "04/21/2020",
	time = "18:15:18"
};
new Float:NULL_VECTOR[3];
new String:NULL_STRING[16];
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
new MaxClients;
public SharedPlugin:__pl_mapchooser =
{
	name = "mapchooser",
	file = "mapchooser.smx",
	required = 1,
};
public Plugin:myinfo =
{
	name = "Map Nominations",
	description = "Provides Map Nominations",
	author = "AlliedModders LLC",
	version = "1.10.0.6484",
	url = "http://www.sourcemod.net/"
};
new ConVar:g_Cvar_ExcludeOld;
new ConVar:g_Cvar_ExcludeCurrent;
new ConVar:g_Cvar_MaxMatches;
new Menu:g_MapMenu;
new ArrayList:g_MapList;
new g_mapFileSerial = -1;
new StringMap:g_mapTrie;
bool:StrEqual(String:str1[], String:str2[], bool:caseSensitive)
{
	return strcmp(str1[0], str2[0], caseSensitive) == 0;
}

void:PrintToChatAll(String:format[], any:_arg1)
{
	new String:buffer[1024];
	new i = 1;
	while (i <= MaxClients)
	{
		if (IsClientInGame(i))
		{
			SetGlobalTransTarget(i);
			VFormat(buffer, 254, format[0], 2);
			PrintToChat(i, "%s", buffer);
		}
		i++;
	}
	return 0;
}

ByteCountToCells(size)
{
	if (size)
	{
		return size + 3 / 4;
	}
	return 1;
}

FindMatchingMaps(ArrayList:mapList, ArrayList:results, String:input[])
{
	new map_count = ArrayList.Length.get(mapList);
	if (map_count)
	{
		new matches;
		new String:map[1024];
		new maxmatches = ConVar.IntValue.get(g_Cvar_MaxMatches);
		new i;
		while (i < map_count)
		{
			ArrayList.GetString(mapList, i, map, 256);
			if (StrContains(map, input[0], true) != -1)
			{
				ArrayList.Push(results, i);
				matches++;
				new var1;
				if (maxmatches > 0 && matches >= maxmatches)
				{
					return matches;
				}
			}
			i++;
		}
		return matches;
	}
	return -1;
}

void:AttemptNominate(client, String:map[], size)
{
	new String:mapname[1024];
	if (FindMap(map[0], mapname, size) == 1)
	{
		ReplyToCommand(client, "%t", "Map was not found", mapname);
		return 0;
	}
	new String:displayName[1024];
	GetMapDisplayName(mapname, displayName, 256);
	new status;
	if (StringMap.GetValue(g_mapTrie, mapname, status))
	{
		if (status & 2 == 2)
		{
			if (status & 4 == 4)
			{
				ReplyToCommand(client, "[SM] %t", 3484);
			}
			if (status & 8 == 8)
			{
				ReplyToCommand(client, "[SM] %t", 3520);
			}
			if (status & 16 == 16)
			{
				ReplyToCommand(client, "[SM] %t", 3548);
			}
			return 0;
		}
		new NominateResult:result = NominateMap(mapname, false, client);
		if (result > 1)
		{
			if (result == 2)
			{
				ReplyToCommand(client, "%t", "Map Already In Vote", displayName);
			}
			else
			{
				ReplyToCommand(client, "[SM] %t", 3604);
			}
			return 0;
		}
		StringMap.SetValue(g_mapTrie, mapname, 18, true);
		new String:name[512];
		GetClientName(client, name, 128);
		PrintToChatAll("[SM] %t", "Map Nominated", name, displayName);
		return 0;
	}
	ReplyToCommand(client, "%t", "Map was not found", displayName);
	return 0;
}

void:OpenNominationMenu(client)
{
	Menu.SetTitle(g_MapMenu, "%T", "Nominate Title", client);
	Menu.Display(g_MapMenu, client, 0);
	return 0;
}

void:BuildMapMenu()
{
	CloseHandle(g_MapMenu);
	g_MapMenu = 0;
	StringMap.Clear(g_mapTrie);
	g_MapMenu = Menu.Menu(19, 796);
	new String:map[1024];
	new ArrayList:excludeMaps;
	new String:currentMap[1024];
	if (ConVar.BoolValue.get(g_Cvar_ExcludeOld))
	{
		excludeMaps = ArrayList.ArrayList(ByteCountToCells(256), 0);
		GetExcludeMapList(excludeMaps);
	}
	if (ConVar.BoolValue.get(g_Cvar_ExcludeCurrent))
	{
		GetCurrentMap(currentMap, 256);
	}
	new i;
	while (ArrayList.Length.get(g_MapList) > i)
	{
		new status = 1;
		ArrayList.GetString(g_MapList, i, map, 256);
		FindMap(map, map, 256);
		new String:displayName[1024];
		GetMapDisplayName(map, displayName, 256);
		if (ConVar.BoolValue.get(g_Cvar_ExcludeCurrent))
		{
			if (StrEqual(map, currentMap, true))
			{
				status = 6;
			}
		}
		new var1;
		if (ConVar.BoolValue.get(g_Cvar_ExcludeOld) && status == 1)
		{
			if (ArrayList.FindString(excludeMaps, map) != -1)
			{
				status = 10;
			}
		}
		Menu.AddItem(g_MapMenu, map, displayName, 0);
		StringMap.SetValue(g_mapTrie, map, status, true);
		i++;
	}
	Menu.ExitButton.set(g_MapMenu, true);
	CloseHandle(excludeMaps);
	excludeMaps = 0;
	return 0;
}

public Action:Command_Addmap(client, args)
{
	if (args < 1)
	{
		ReplyToCommand(client, "[SM] Usage: sm_nominate_addmap <mapname>");
		return 3;
	}
	new String:mapname[1024];
	new String:resolvedMap[1024];
	GetCmdArg(1, mapname, 256);
	if (FindMap(mapname, resolvedMap, 256) == 1)
	{
		ReplyToCommand(client, "%t", "Map was not found", mapname);
		return 3;
	}
	new String:displayName[1024];
	GetMapDisplayName(resolvedMap, displayName, 256);
	new status;
	if (StringMap.GetValue(g_mapTrie, resolvedMap, status))
	{
		new NominateResult:result = NominateMap(resolvedMap, true, 0);
		if (result > 1)
		{
			ReplyToCommand(client, "%t", "Map Already In Vote", displayName);
			return 3;
		}
		StringMap.SetValue(g_mapTrie, resolvedMap, 18, true);
		ReplyToCommand(client, "%t", "Map Inserted", displayName);
		LogAction(client, -1, "\"%L\" inserted map \"%s\".", client, mapname);
		return 3;
	}
	ReplyToCommand(client, "%t", "Map was not found", displayName);
	return 3;
}

public Action:Command_Nominate(client, args)
{
	if (client)
	{
		new ReplySource:source = GetCmdReplySource();
		if (args)
		{
			new String:mapname[1024];
			GetCmdArg(1, mapname, 256);
			new ArrayList:results = ArrayList.ArrayList(1, 0);
			new matches = FindMatchingMaps(g_MapList, results, mapname);
			new String:mapResult[1024];
			if (0 >= matches)
			{
				ReplyToCommand(client, "%t", "Map was not found", mapname);
			}
			else
			{
				if (matches == 1)
				{
					ArrayList.GetString(g_MapList, ArrayList.Get(results, 0, 0, false), mapResult, 256);
					AttemptNominate(client, mapResult, 256);
				}
				if (matches > 1)
				{
					if (source)
					{
						new Menu:menu = Menu.Menu(19, 796);
						Menu.SetTitle(menu, "Select map");
						new i;
						while (ArrayList.Length.get(results) > i)
						{
							ArrayList.GetString(g_MapList, ArrayList.Get(results, i, 0, false), mapResult, 256);
							Menu.AddItem(menu, mapResult, mapResult, 0);
							i++;
						}
						Menu.Display(menu, client, 30);
					}
					AttemptNominate(client, mapname, 256);
					CloseHandle(results);
					results = 0;
					return 3;
				}
			}
			CloseHandle(results);
			results = 0;
			return 3;
		}
		if (source == 1)
		{
			OpenNominationMenu(client);
		}
		else
		{
			ReplyToCommand(client, "[SM] Usage: sm_nominate <mapname>");
		}
		return 3;
	}
	return 3;
}

public MenuHandler_MapSelect(Menu:menu, MenuAction:action, param1, param2)
{
	switch (action)
	{
		case 4:
		{
			new String:mapname[1024];
			Menu.GetItem(menu, param2, mapname, 256, 0, "", 0);
			AttemptNominate(param1, mapname, 256);
		}
		case 16:
		{
			if (g_MapMenu != menu)
			{
				CloseHandle(menu);
				menu = 0;
			}
		}
		case 256:
		{
			new String:map[1024];
			Menu.GetItem(menu, param2, map, 256, 0, "", 0);
			new status;
			if (StringMap.GetValue(g_mapTrie, map, status))
			{
				if (status & 2 == 2)
				{
					return 1;
				}
				return 0;
			}
			LogError("Menu selection of item not in trie. Major logic problem somewhere.");
			return 0;
		}
		case 512:
		{
			new String:mapname[1024];
			Menu.GetItem(menu, param2, mapname, 256, 0, "", 0);
			new status;
			if (StringMap.GetValue(g_mapTrie, mapname, status))
			{
				if (status & 2 == 2)
				{
					if (status & 4 == 4)
					{
						Format(mapname, 256, "%s (%T)", mapname, "Current Map", param1);
						return RedrawMenuItem(mapname);
					}
					if (status & 8 == 8)
					{
						Format(mapname, 256, "%s (%T)", mapname, "Recently Played", param1);
						return RedrawMenuItem(mapname);
					}
					if (status & 16 == 16)
					{
						Format(mapname, 256, "%s (%T)", mapname, "Nominated", param1);
						return RedrawMenuItem(mapname);
					}
				}
			}
			LogError("Menu selection of item not in trie. Major logic problem somewhere.");
			return 0;
		}
		default:
		{
		}
	}
	return 0;
}

public void:OnClientSayCommand_Post(client, String:command[], String:sArgs[])
{
	new var1;
	if (client && IsChatTrigger())
	{
		return 0;
	}
	if (!(strcmp(sArgs[0], "nominate", false)))
	{
		new ReplySource:old = SetCmdReplySource(1);
		OpenNominationMenu(client);
		SetCmdReplySource(old);
	}
	return 0;
}

public void:OnConfigsExecuted()
{
	if (!(ReadMapList(g_MapList, g_mapFileSerial, "nominations", 3)))
	{
		if (g_mapFileSerial == -1)
		{
			SetFailState("Unable to create a valid map list.");
		}
	}
	BuildMapMenu();
	return 0;
}

public void:OnNominationRemoved(String:map[], owner)
{
	new status;
	new String:resolvedMap[1024];
	FindMap(map[0], resolvedMap, 256);
	if (StringMap.GetValue(g_mapTrie, resolvedMap, status))
	{
		if (status & 16 != 16)
		{
			return 0;
		}
		StringMap.SetValue(g_mapTrie, resolvedMap, 1, true);
		return 0;
	}
	return 0;
}

public void:OnPluginStart()
{
	LoadTranslations("common.phrases");
	LoadTranslations("nominations.phrases");
	new arraySize = ByteCountToCells(256);
	g_MapList = ArrayList.ArrayList(arraySize, 0);
	g_Cvar_ExcludeOld = CreateConVar("sm_nominate_excludeold", "1", "Specifies if the MapChooser excluded maps should also be excluded from Nominations", 0, true, 0.0, true, 1.0);
	g_Cvar_ExcludeCurrent = CreateConVar("sm_nominate_excludecurrent", "1", "Specifies if the current map should be excluded from the Nominations list", 0, true, 0.0, true, 1.0);
	g_Cvar_MaxMatches = CreateConVar("sm_nominate_maxfound", "0", "Maximum number of nomination matches to add to the menu. 0 = infinite.", 0, true, 0.0, false, 0.0);
	RegConsoleCmd("sm_nominate", 17, "", 0);
	RegAdminCmd("sm_nominate_addmap", 15, 64, "sm_nominate_addmap <mapname> - Forces a map to be on the next mapvote.", "", 0);
	g_mapTrie = StringMap.StringMap();
	return 0;
}

public void:__ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.BytesLeft.get");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadInt64");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetInt64");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddInt64");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

public void:__pl_mapchooser_SetNTVOptional()
{
	MarkNativeAsOptional("NominateMap");
	MarkNativeAsOptional("RemoveNominationByMap");
	MarkNativeAsOptional("RemoveNominationByOwner");
	MarkNativeAsOptional("GetExcludeMapList");
	MarkNativeAsOptional("GetNominatedMapList");
	MarkNativeAsOptional("CanMapChooserStartVote");
	MarkNativeAsOptional("InitiateMapChooserVote");
	MarkNativeAsOptional("HasEndOfMapVoteFinished");
	MarkNativeAsOptional("EndOfMapVoteEnabled");
	return 0;
}

