public PlVers:__version =
{
	version = 5,
	filevers = "1.10.0.6484",
	date = "04/21/2020",
	time = "18:15:14"
};
new Float:NULL_VECTOR[3];
new String:NULL_STRING[16];
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
new MaxClients;
public Plugin:myinfo =
{
	name = "Reserved Slots",
	description = "Provides basic reserved slots",
	author = "AlliedModders LLC",
	version = "1.10.0.6484",
	url = "http://www.sourcemod.net/"
};
new g_adminCount;
new bool:g_isAdmin[66];
new ConVar:sm_reserved_slots;
new ConVar:sm_hide_slots;
new ConVar:sv_visiblemaxplayers;
new ConVar:sm_reserve_type;
new ConVar:sm_reserve_maxadmins;
new ConVar:sm_reserve_kicktype;
void:CheckHiddenSlots()
{
	if (ConVar.BoolValue.get(sm_hide_slots))
	{
		SetVisibleMaxSlots(GetClientCount(false), GetMaxHumanPlayers() - ConVar.IntValue.get(sm_reserved_slots));
	}
	return 0;
}

void:SetVisibleMaxSlots(clients, limit)
{
	new num = clients;
	if (GetMaxHumanPlayers() == clients)
	{
		num = GetMaxHumanPlayers();
	}
	else
	{
		if (clients < limit)
		{
			num = limit;
		}
	}
	ConVar.IntValue.set(sv_visiblemaxplayers, num);
	return 0;
}

void:ResetVisibleMax()
{
	ConVar.IntValue.set(sv_visiblemaxplayers, -1);
	return 0;
}

SelectKickClient()
{
	new KickType:type = ConVar.IntValue.get(sm_reserve_kicktype);
	new Float:highestValue = 0.0;
	new highestValueId;
	new Float:highestSpecValue = 0.0;
	new highestSpecValueId;
	new bool:specFound;
	new Float:value = 0.0;
	new i = 1;
	while (i <= MaxClients)
	{
		if (IsClientConnected(i))
		{
			new flags = GetUserFlagBits(i);
			new var1;
			if (!(IsFakeClient(i) || flags & 16384 || flags & 1 || CheckCommandAccess(i, "sm_reskick_immunity", 1, true)))
			{
				value = 0.0;
				if (IsClientInGame(i))
				{
					if (type)
					{
						if (type == 1)
						{
							value = GetClientTime(i);
						}
						value = GetRandomFloat(0.0, 100.0);
					}
					else
					{
						value = GetClientAvgLatency(i, 0);
					}
					if (IsClientObserver(i))
					{
						specFound = true;
						if (value > highestSpecValue)
						{
							highestSpecValue = value;
							highestSpecValueId = i;
						}
					}
				}
				if (value >= highestValue)
				{
					highestValue = value;
					highestValueId = i;
				}
			}
		}
		i++;
	}
	if (specFound)
	{
		return highestSpecValueId;
	}
	return highestValueId;
}

public void:OnClientDisconnect_Post(client)
{
	CheckHiddenSlots();
	if (g_isAdmin[client])
	{
		g_adminCount -= 1;
		g_isAdmin[client] = 0;
	}
	return 0;
}

public void:OnClientPostAdminCheck(client)
{
	new reserved = ConVar.IntValue.get(sm_reserved_slots);
	if (0 < reserved)
	{
		new clients = GetClientCount(false);
		new limit = GetMaxHumanPlayers() - reserved;
		new flags = GetUserFlagBits(client);
		new type = ConVar.IntValue.get(sm_reserve_type);
		if (type)
		{
			if (type == 1)
			{
				if (clients > limit)
				{
					new var2;
					if (flags & 16384 || flags & 1)
					{
						new target = SelectKickClient();
						if (target)
						{
							CreateTimer(0.1, 21, target, 0);
						}
					}
					CreateTimer(0.1, 21, client, 0);
				}
			}
			if (type == 2)
			{
				new var3;
				if (flags & 16384 || flags & 1)
				{
					g_adminCount += 1;
					g_isAdmin[client] = 1;
				}
				new var4;
				if (clients > limit && g_adminCount < ConVar.IntValue.get(sm_reserve_maxadmins))
				{
					if (g_isAdmin[client])
					{
						new target = SelectKickClient();
						if (target)
						{
							CreateTimer(0.1, 21, target, 0);
						}
					}
					CreateTimer(0.1, 21, client, 0);
				}
			}
		}
		else
		{
			new var1;
			if (clients <= limit || IsFakeClient(client) || flags & 16384 || flags & 1)
			{
				if (ConVar.BoolValue.get(sm_hide_slots))
				{
					SetVisibleMaxSlots(clients, limit);
				}
				return 0;
			}
			CreateTimer(0.1, 21, client, 0);
		}
	}
	return 0;
}

public void:OnConfigsExecuted()
{
	CheckHiddenSlots();
	return 0;
}

public void:OnMapStart()
{
	CheckHiddenSlots();
	return 0;
}

public void:OnPluginEnd()
{
	ResetVisibleMax();
	return 0;
}

public void:OnPluginStart()
{
	LoadTranslations("reservedslots.phrases");
	sm_reserved_slots = CreateConVar("sm_reserved_slots", "0", "Number of reserved player slots", 0, true, 0.0, false, 0.0);
	sm_hide_slots = CreateConVar("sm_hide_slots", "0", "If set to 1, reserved slots will hidden (subtracted from the max slot count)", 0, true, 0.0, true, 1.0);
	sv_visiblemaxplayers = FindConVar("sv_visiblemaxplayers");
	sm_reserve_type = CreateConVar("sm_reserve_type", "0", "Method of reserving slots", 0, true, 0.0, true, 2.0);
	sm_reserve_maxadmins = CreateConVar("sm_reserve_maxadmins", "1", "Maximum amount of admins to let in the server with reserve type 2", 0, true, 0.0, false, 0.0);
	sm_reserve_kicktype = CreateConVar("sm_reserve_kicktype", "0", "How to select a client to kick (if appropriate)", 0, true, 0.0, true, 2.0);
	ConVar.AddChangeHook(sm_reserved_slots, 23);
	ConVar.AddChangeHook(sm_hide_slots, 25);
	return 0;
}

public Action:OnTimedKick(Handle:timer, any:client)
{
	new var1;
	if (client && IsClientInGame(client))
	{
		return 3;
	}
	KickClient(client, "%T", "Slot reserved", client);
	CheckHiddenSlots();
	return 3;
}

public void:SlotCountChanged(ConVar:convar, String:oldValue[], String:newValue[])
{
	new slotcount = ConVar.IntValue.get(convar);
	if (slotcount)
	{
		if (ConVar.BoolValue.get(sm_hide_slots))
		{
			SetVisibleMaxSlots(GetClientCount(false), GetMaxHumanPlayers() - slotcount);
		}
	}
	else
	{
		ResetVisibleMax();
	}
	return 0;
}

public void:SlotHideChanged(ConVar:convar, String:oldValue[], String:newValue[])
{
	if (ConVar.BoolValue.get(convar))
	{
		SetVisibleMaxSlots(GetClientCount(false), GetMaxHumanPlayers() - ConVar.IntValue.get(sm_reserved_slots));
	}
	else
	{
		ResetVisibleMax();
	}
	return 0;
}

public void:__ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.BytesLeft.get");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadInt64");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetInt64");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddInt64");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

