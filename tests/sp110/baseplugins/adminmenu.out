public PlVers:__version =
{
	version = 5,
	filevers = "1.10.0.6484",
	date = "04/21/2020",
	time = "18:15:20"
};
new Float:NULL_VECTOR[3];
new String:NULL_STRING[16];
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
new MaxClients;
public Extension:__ext_topmenus =
{
	name = "TopMenus",
	file = "topmenus.ext",
	autoload = 1,
	required = 1,
};
public Plugin:myinfo =
{
	name = "Admin Menu",
	description = "Administration Menu",
	author = "AlliedModders LLC",
	version = "1.10.0.6484",
	url = "http://www.sourcemod.net/"
};
new GlobalForward:hOnAdminMenuReady;
new GlobalForward:hOnAdminMenuCreated;
new TopMenu:hAdminMenu;
new TopMenuObject:obj_playercmds;
new TopMenuObject:obj_servercmds;
new TopMenuObject:obj_votingcmds;
new <enumstruct3>:g_groupList;
new g_groupCount;
new SMCParser:g_configParser;
new String:g_command[256][264];
new <enumstruct2>:g_currentPlace[66] =
{
	264, 272, 280, 288, 296, 304, 312, 320, 328, 336, 344, 352, 360, 368, 376, 384, 392, 400, 408, 416, 424, 432, 440, 448, 456, 464, 472, 480, 488, 496, 504, 512, 520, 528, 536, 544, 552, 560, 568, 576, 584, 592, 600, 608, 616, 624, 632, 640, 648, 656, 664, 672, 680, 688, 696, 704, 712, 720, 728, 736, 744, 752, 760, 768, 776, 784
};
new ArrayList:g_DataArray;
bool:QuoteString(String:input[], String:output[], maxlen, String:quotechars[])
{
	new count;
	new len = strlen(input[0]);
	new i;
	while (i < len)
	{
		output[0][count] = input[0][i];
		count++;
		if (count >= maxlen)
		{
			output[0][maxlen + -1] = '\x00';
			return 0;
		}
		new var1;
		if (FindCharInString(quotechars[0], input[0][i], false) == -1 && input[0][i] == '\')
		{
			output[0][count] = '\';
			count++;
			if (count >= maxlen)
			{
				output[0][maxlen + -1] = '\x00';
				return 0;
			}
		}
		i++;
	}
	output[0][count] = '\x00';
	return 1;
}

bool:UnQuoteString(String:input[], String:output[], maxlen, String:quotechars[])
{
	new count = 1;
	new len = strlen(input[0]);
	output[0] = input[0];
	new i = 1;
	while (i < len)
	{
		output[0][count] = input[0][i];
		count++;
		new var2;
		if (input[0][i + 1] == '\' && (input[0][i] == '\' || FindCharInString(quotechars[0], input[0][i], false) == -1))
		{
			i++;
		}
		if (count >= maxlen)
		{
			output[0][maxlen + -1] = '\x00';
			return 0;
		}
		i++;
	}
	output[0][count] = '\x00';
	return 1;
}

UTIL_AddTargetsToMenu2(Menu:menu, source_client, flags)
{
	new String:user_id[48];
	new String:name[512];
	new String:display[560];
	new num_clients;
	new i = 1;
	while (i <= MaxClients)
	{
		new var1;
		if (IsClientConnected(i) && IsClientInKickQueue(i))
		{
		}
		else
		{
			new var2;
			if (!(flags & 32 == 32 && IsFakeClient(i)))
			{
				new var3;
				if (!(flags & 4 != 4 && IsClientInGame(i)))
				{
					new var4;
					if (!(flags & 1 == 1 && IsPlayerAlive(i)))
					{
						new var5;
						if (!(flags & 2 == 2 && IsPlayerAlive(i)))
						{
							new var6;
							if (!((source_client && flags & 8 != 8) && CanUserTarget(source_client, i)))
							{
								IntToString(GetClientUserId(i), user_id, 12);
								GetClientName(i, name, 128);
								Format(display, 140, "%s (%s)", name, user_id);
								Menu.AddItem(menu, user_id, display, 0);
								num_clients++;
							}
						}
					}
				}
			}
		}
		i++;
	}
	return num_clients;
}

UTIL_AddTargetsToMenu(Menu:menu, source_client, bool:in_game_only, bool:alive_only)
{
	new flags;
	if (!in_game_only)
	{
		flags |= 4;
	}
	if (alive_only)
	{
		flags |= 1;
	}
	return UTIL_AddTargetsToMenu2(menu, source_client, flags);
}

bool:StrEqual(String:str1[], String:str2[], bool:caseSensitive)
{
	return strcmp(str1[0], str2[0], caseSensitive) == 0;
}

FindCharInString(String:str[], String:c, bool:reverse)
{
	new len = strlen(str[0]);
	if (reverse)
	{
		new i = len + -1;
		while (0 <= i)
		{
			if (c == str[0][i])
			{
				return i;
			}
			i--;
		}
	}
	else
	{
		new i;
		while (i < len)
		{
			if (c == str[0][i])
			{
				return i;
			}
			i++;
		}
	}
	return -1;
}


/* ERROR! null */
 function "BuildDynamicMenu" (number 6)

void:ParseConfigs()
{
	if (!g_configParser)
	{
		g_configParser = SMCParser.SMCParser();
	}
	SMCParser.OnEnterSection.set(g_configParser, 33);
	SMCParser.OnKeyValue.set(g_configParser, 29);
	SMCParser.OnLeaveSection.set(g_configParser, 27);
	new var1 = g_groupList;
	CloseHandle(var1);
	var1 = 0;
	new var2 = g_groupList + 4;
	CloseHandle(var2);
	var2 = 0;
	g_groupList = ArrayList.ArrayList(32, 0);
	g_groupList + 4/* ERROR unknown load Binary */ = ArrayList.ArrayList(32, 0);
	new String:configPath[1024];
	BuildPath(0, configPath, 256, "configs/dynamicmenu/adminmenu_grouping.txt");
	if (FileExists(configPath, false, "GAME"))
	{
		LogError("Warning! configs/dynamicmenu/adminmenu_grouping.txt is now configs/adminmenu_grouping.txt.");
		LogError("Read the 1.0.2 release notes, as the dynamicmenu folder has been removed.");
	}
	else
	{
		BuildPath(0, configPath, 256, "configs/adminmenu_grouping.txt");
	}
	if (FileExists(configPath, false, "GAME"))
	{
		new line;
		new SMCError:err = SMCParser.ParseFile(g_configParser, configPath, line, 0);
		if (err)
		{
			new String:error[1024];
			SMC_GetErrorString(err, error, 256);
			LogError("Could not parse file (line %d, file \"%s\"):", line, configPath);
			LogError("Parser encountered error: %s", error);
		}
		return 0;
	}
	LogError("Unable to locate admin menu groups file: %s", configPath);
	return 0;
}

public APLRes:AskPluginLoad2(Handle:myself, bool:late, String:error[], err_max)
{
	CreateNative("GetAdminTopMenu", 49);
	CreateNative("AddTargetsToMenu", 45);
	CreateNative("AddTargetsToMenu2", 47);
	RegPluginLibrary("adminmenu");
	return 0;
}

public Action:Command_DisplayMenu(client, args)
{
	if (client)
	{
		TopMenu.Display(hAdminMenu, client, 0);
		return 3;
	}
	ReplyToCommand(client, "[SM] %t", 22136);
	return 3;
}

public void:DefaultCategoryHandler(TopMenu:topmenu, TopMenuAction:action, TopMenuObject:object_id, param, String:buffer[], maxlength)
{
	if (action == 1)
	{
		if (object_id)
		{
			if (obj_playercmds == object_id)
			{
				Format(buffer[0], maxlength, "%T:", "Player Commands", param);
			}
			if (obj_servercmds == object_id)
			{
				Format(buffer[0], maxlength, "%T:", "Server Commands", param);
			}
			if (obj_votingcmds == object_id)
			{
				Format(buffer[0], maxlength, "%T:", "Voting Commands", param);
			}
		}
		else
		{
			Format(buffer[0], maxlength, "%T:", "Admin Menu", param);
		}
	}
	else
	{
		if (!action)
		{
			if (obj_playercmds == object_id)
			{
				Format(buffer[0], maxlength, "%T", "Player Commands", param);
			}
			if (obj_servercmds == object_id)
			{
				Format(buffer[0], maxlength, "%T", "Server Commands", param);
			}
			if (obj_votingcmds == object_id)
			{
				Format(buffer[0], maxlength, "%T", "Voting Commands", param);
			}
		}
	}
	return 0;
}

public void:DynamicMenuCategoryHandler(TopMenu:topmenu, TopMenuAction:action, TopMenuObject:object_id, param, String:buffer[], maxlength)
{
	new var1;
	if (action == 1 || action)
	{
		TopMenu.GetObjName(topmenu, object_id, buffer[0], maxlength);
	}
	return 0;
}

public void:DynamicMenuItemHandler(TopMenu:topmenu, TopMenuAction:action, TopMenuObject:object_id, param, String:buffer[], maxlength)
{
	if (action)
	{
		if (action == 2)
		{
			new String:locString[48];
			TopMenu.GetInfoString(topmenu, object_id, locString, 10);
			new location = StringToInt(locString, 10);
			new <enumstruct1>:output;
			ArrayList.GetArray(g_DataArray, location, output, -1);
			strcopy(g_command[param], 255, output);
			g_currentPlace[param][1] = location;
			g_currentPlace[param][2] = 1;
			ParamCheck(param);
		}
	}
	else
	{
		TopMenu.GetObjName(topmenu, object_id, buffer[0], maxlength);
	}
	return 0;
}

public SMCResult:EndSection(SMCParser:smc)
{
	g_groupCount = ArrayList.Length.get(g_groupList);
	return 0;
}

public SMCResult:KeyValue(SMCParser:smc, String:key[], String:value[], bool:key_quotes, bool:value_quotes)
{
	ArrayList.PushString(g_groupList, key[0]);
	ArrayList.PushString(g_groupList + 4/* ERROR unknown load Binary */, value[0]);
	return 0;
}

public Menu_Selection(Menu:menu, MenuAction:action, param1, param2)
{
	if (action == 16)
	{
		CloseHandle(menu);
		menu = 0;
	}
	if (action == 4)
	{
		new String:unquotedinfo[256];
		new bool:found = Menu.GetItem(menu, param2, unquotedinfo, 64, 0, "", 0);
		if (found)
		{
			new String:info[528];
			QuoteString(unquotedinfo, info, 129, "#@");
			new String:buffer[32];
			new String:infobuffer[272];
			Format(infobuffer, 66, "\"%s\"", info);
			Format(buffer, 5, "#%i", g_currentPlace[param1][2]);
			ReplaceString(g_command[param1], 255, buffer, infobuffer, true);
			Format(buffer, 5, "@%i", g_currentPlace[param1][2]);
			ReplaceString(g_command[param1], 255, buffer, info, true);
			g_currentPlace[param1][2]++;
			ParamCheck(param1);
		}
		return 0;
	}
	new var1;
	if (action == 8 && param2 == -6)
	{
		TopMenu.Display(hAdminMenu, param1, 3);
	}
	return 0;
}

public SMCResult:NewSection(SMCParser:smc, String:name[], bool:opt_quotes)
{
	return 0;
}

public void:OnAllPluginsLoaded()
{
	hAdminMenu = TopMenu.TopMenu(21);
	obj_playercmds = TopMenu.AddCategory(hAdminMenu, "PlayerCommands", 21, "", 0, "");
	obj_servercmds = TopMenu.AddCategory(hAdminMenu, "ServerCommands", 21, "", 0, "");
	obj_votingcmds = TopMenu.AddCategory(hAdminMenu, "VotingCommands", 21, "", 0, "");
	BuildDynamicMenu();
	Call_StartForward(hOnAdminMenuCreated);
	Call_PushCell(hAdminMenu);
	Call_Finish(0);
	Call_StartForward(hOnAdminMenuReady);
	Call_PushCell(hAdminMenu);
	Call_Finish(0);
	return 0;
}

public void:OnConfigsExecuted()
{
	new String:path[1024];
	new String:error[1024];
	BuildPath(0, path, 256, "configs/adminmenu_sorting.txt");
	if (TopMenu.LoadConfig(hAdminMenu, path, error, 256))
	{
		return 0;
	}
	LogError("Could not load admin menu config (file \"%s\": %s)", path, error);
	return 0;
}

public void:OnMapStart()
{
	ParseConfigs();
	return 0;
}

public void:OnPluginStart()
{
	LoadTranslations("common.phrases");
	LoadTranslations("adminmenu.phrases");
	hOnAdminMenuCreated = GlobalForward.GlobalForward("OnAdminMenuCreated", 0, 2);
	hOnAdminMenuReady = GlobalForward.GlobalForward("OnAdminMenuReady", 0, 2);
	RegAdminCmd("sm_admin", 19, 2, "Displays the admin menu", "", 0);
	return 0;
}

public void:ParamCheck(client)
{
	new String:buffer[32];
	new String:buffer2[32];
	new <enumstruct1>:outputItem;
	new <enumstruct0>:outputSubmenu;
	ArrayList.GetArray(g_DataArray, g_currentPlace[client][1], outputItem, -1);
	if (g_currentPlace[client][2] < 1)
	{
		g_currentPlace[client][2] = 1;
	}
	Format(buffer, 5, "#%i", g_currentPlace[client][2]);
	Format(buffer2, 5, "@%i", g_currentPlace[client][2]);
	new var1;
	if (StrContains(g_command[client], buffer, true) == -1 && StrContains(g_command[client], buffer2, true) == -1)
	{
		ArrayList.GetArray(outputItem + 260/* ERROR unknown load Binary */, g_currentPlace[client][2][0], outputSubmenu, -1);
		new Menu:itemMenu = Menu.Menu(31, 28);
		Menu.ExitBackButton.set(itemMenu, true);
		new var2;
		if (outputSubmenu && outputSubmenu == 1)
		{
			new String:nameBuffer[128];
			new String:commandBuffer[128];
			new i;
			while (i < g_groupCount)
			{
				ArrayList.GetString(g_groupList, i, nameBuffer, 32);
				ArrayList.GetString(g_groupList + 4/* ERROR unknown load Binary */, i, commandBuffer, 32);
				Menu.AddItem(itemMenu, commandBuffer, nameBuffer, 0);
				i++;
			}
		}
		if (outputSubmenu == 3)
		{
			new String:path[800];
			DataPack.ReadString(outputSubmenu + 44/* ERROR unknown load Binary */, path, 200);
			DataPack.Reset(outputSubmenu + 44/* ERROR unknown load Binary */, false);
			new File:file = OpenFile(path, "rt", false, "GAME");
			new String:readData[512];
			if (file)
			{
				while (File.EndOfFile(file) && File.ReadLine(file, readData, 128))
				{
					TrimString(readData);
					if (IsMapValid(readData))
					{
						Menu.AddItem(itemMenu, readData, readData, 0);
					}
				}
			}
		}
		else
		{
			new var4;
			if (outputSubmenu == 2 || outputSubmenu == 1)
			{
				new PlayerMethod:playermethod = outputSubmenu + 36/* ERROR unknown load Binary */;
				new String:nameBuffer[512];
				new String:infoBuffer[128];
				new String:temp[16];
				new i = 1;
				while (i <= MaxClients)
				{
					if (IsClientInGame(i))
					{
						GetClientName(i, nameBuffer, 128);
						switch (playermethod)
						{
							case 1:
							{
								new userid = GetClientUserId(i);
								Format(infoBuffer, 32, "#%i", userid);
								Menu.AddItem(itemMenu, infoBuffer, nameBuffer, 0);
							}
							case 2:
							{
								Menu.AddItem(itemMenu, nameBuffer, nameBuffer, 0);
							}
							case 3:
							{
								if (GetClientAuthId(i, 1, infoBuffer, 32, true))
								{
									Menu.AddItem(itemMenu, infoBuffer, nameBuffer, 0);
								}
							}
							case 4:
							{
								GetClientIP(i, infoBuffer, 32, true);
								Menu.AddItem(itemMenu, infoBuffer, nameBuffer, 0);
							}
							case 5:
							{
								new userid = GetClientUserId(i);
								Format(infoBuffer, 32, "%i", userid);
								Menu.AddItem(itemMenu, infoBuffer, nameBuffer, 0);
							}
							default:
							{
								Format(temp, 3, "%i", i);
								Menu.AddItem(itemMenu, temp, nameBuffer, 0);
							}
						}
					}
					i++;
				}
			}
			if (outputSubmenu == 5)
			{
				Menu.AddItem(itemMenu, "1", "On", 0);
				Menu.AddItem(itemMenu, "0", "Off", 0);
			}
			new String:value[256];
			new String:text[256];
			new String:admin[256];
			new i;
			while (outputSubmenu + 40/* ERROR unknown load Binary */ > i)
			{
				DataPack.ReadString(outputSubmenu + 44/* ERROR unknown load Binary */, value, 64);
				DataPack.ReadString(outputSubmenu + 44/* ERROR unknown load Binary */, text, 64);
				DataPack.ReadString(outputSubmenu + 44/* ERROR unknown load Binary */, admin, 64);
				if (CheckCommandAccess(client, admin, 0, false))
				{
					Menu.AddItem(itemMenu, value, text, 0);
				}
				i++;
			}
			DataPack.Reset(outputSubmenu + 44/* ERROR unknown load Binary */, false);
		}
		Menu.SetTitle(itemMenu, outputSubmenu + 4);
		Menu.Display(itemMenu, client, 0);
	}
	else
	{
		TopMenu.Display(hAdminMenu, client, 3);
		new String:unquotedCommand[1024];
		UnQuoteString(g_command[client], unquotedCommand, 255, "#@");
		if (outputItem + 256/* ERROR unknown load Binary */)
		{
			InsertServerCommand(unquotedCommand);
			ServerExecute();
		}
		else
		{
			FakeClientCommand(client, unquotedCommand);
		}
		g_command[client][0] = '\x00';
		g_currentPlace[client][2] = 1;
	}
	return 0;
}

public __AddTargetsToMenu(Handle:plugin, numParams)
{
	new bool:alive_only;
	if (numParams >= 4)
	{
		alive_only = GetNativeCell(4);
	}
	return UTIL_AddTargetsToMenu(GetNativeCell(1), GetNativeCell(2), GetNativeCell(3), alive_only);
}

public __AddTargetsToMenu2(Handle:plugin, numParams)
{
	return UTIL_AddTargetsToMenu2(GetNativeCell(1), GetNativeCell(2), GetNativeCell(3));
}

public any:__GetAdminTopMenu(Handle:plugin, numParams)
{
	return hAdminMenu;
}

public void:__ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.BytesLeft.get");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadInt64");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetInt64");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddInt64");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

