public PlVers:__version =
{
	version = 5,
	filevers = "1.10.0.6484",
	date = "04/21/2020",
	time = "18:15:20"
};
new Float:NULL_VECTOR[3];
new String:NULL_STRING[16];
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
new MaxClients;
public Extension:__ext_topmenus =
{
	name = "TopMenus",
	file = "topmenus.ext",
	autoload = 1,
	required = 0,
};
public SharedPlugin:__pl_adminmenu =
{
	name = "adminmenu",
	file = "adminmenu.smx",
	required = 0,
};
public Plugin:myinfo =
{
	name = "Basic Ban Commands",
	description = "Basic Banning Commands",
	author = "AlliedModders LLC",
	version = "1.10.0.6484",
	url = "http://www.sourcemod.net/"
};
new TopMenu:hTopMenu;
new <enumstruct0>:playerinfo[66] =
{
	264, 276, 288, 300, 312, 324, 336, 348, 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540, 552, 564, 576, 588, 600, 612, 624, 636, 648, 660, 672, 684, 696, 708, 720, 732, 744, 756, 768, 780, 792, 804, 816, 828, 840, 852, 864, 876, 888, 900, 912, 924, 936, 948, 960, 972, 984, 996, 1008, 1020, 1032, 1044
};
new KeyValues:g_hKvBanReasons;
new String:g_BanReasonsPath[1024];
void:LoadBanReasons()
{
	CloseHandle(g_hKvBanReasons);
	g_hKvBanReasons = 0;
	g_hKvBanReasons = KeyValues.KeyValues("banreasons", "", "");
	if (KeyValues.ImportFromFile(g_hKvBanReasons, g_BanReasonsPath))
	{
		new String:sectionName[1024];
		if (KeyValues.GetSectionName(g_hKvBanReasons, sectionName, 255))
		{
			if (strcmp(sectionName, "banreasons", true))
			{
				SetFailState("Error in %s: Couldn't find 'banreasons'", 4512);
				return 0;
			}
			KeyValues.Rewind(g_hKvBanReasons);
			return 0;
		}
		SetFailState("Error in %s: File corrupt or in the wrong format", 4512);
		return 0;
	}
	SetFailState("Error in %s: File not found, corrupt or in the wrong format", 4512);
	return 0;
}

bool:StrEqual(String:str1[], String:str2[], bool:caseSensitive)
{
	return strcmp(str1[0], str2[0], caseSensitive) == 0;
}

void:ReplyToTargetError(client, reason)
{
	switch (reason)
	{
		case -7:
		{
			ReplyToCommand(client, "[SM] %t", 2492);
		}
		case -6:
		{
			ReplyToCommand(client, "[SM] %t", 2464);
		}
		case -5:
		{
			ReplyToCommand(client, "[SM] %t", 2436);
		}
		case -4:
		{
			ReplyToCommand(client, "[SM] %t", 2408);
		}
		case -3:
		{
			ReplyToCommand(client, "[SM] %t", 2376);
		}
		case -2:
		{
			ReplyToCommand(client, "[SM] %t", 2348);
		}
		case -1:
		{
			ReplyToCommand(client, "[SM] %t", 2316);
		}
		case 0:
		{
			ReplyToCommand(client, "[SM] %t", 2288);
		}
		default:
		{
		}
	}
	return 0;
}

FindTarget(client, String:target[], bool:nobots, bool:immunity)
{
	new String:target_name[256];
	new target_list[1];
	new target_count;
	new bool:tn_is_ml;
	new flags = 16;
	if (nobots)
	{
		flags |= 32;
	}
	if (!immunity)
	{
		flags |= 8;
	}
	if (0 < (target_count = ProcessTargetString(target[0], client, target_list, 1, flags, target_name, 64, tn_is_ml)))
	{
		return target_list[0];
	}
	ReplyToTargetError(client, target_count);
	return -1;
}

void:PrepareBan(client, target, time, String:reason[])
{
	new originalTarget = GetClientOfUserId(playerinfo[client][1]);
	if (target != originalTarget)
	{
		if (client)
		{
			PrintToChat(client, "[SM] %t", 4812);
		}
		else
		{
			PrintToServer("[SM] %t", 4776);
		}
		return 0;
	}
	new String:name[512];
	GetClientName(target, name, 128);
	if (time)
	{
		if (reason[0])
		{
			ShowActivity(client, "%t", "Banned player reason", name, time, reason[0]);
		}
		ShowActivity(client, "%t", "Banned player", name, time);
	}
	else
	{
		if (reason[0])
		{
			ShowActivity(client, "%t", "Permabanned player reason", name, reason[0]);
		}
		else
		{
			ShowActivity(client, "%t", "Permabanned player", name);
		}
	}
	LogAction(client, target, "\"%L\" banned \"%L\" (minutes \"%d\") (reason \"%s\")", client, target, time, reason[0]);
	if (reason[0])
	{
		BanClient(target, time, 1, reason[0], reason[0], "sm_ban", client);
	}
	else
	{
		BanClient(target, time, 1, "Banned", "Banned", "sm_ban", client);
	}
	return 0;
}

void:DisplayBanTargetMenu(client)
{
	new Menu:menu = Menu.Menu(29, 28);
	new String:title[400];
	Format(title, 100, "%T:", "Ban player", client);
	Menu.SetTitle(menu, title);
	Menu.ExitBackButton.set(menu, true);
	AddTargetsToMenu2(menu, client, 36);
	Menu.Display(menu, client, 0);
	return 0;
}

void:DisplayBanTimeMenu(client)
{
	new Menu:menu = Menu.Menu(33, 28);
	new String:title[400];
	Format(title, 100, "%T: %N", "Ban player", client, playerinfo[client]);
	Menu.SetTitle(menu, title);
	Menu.ExitBackButton.set(menu, true);
	Menu.AddItem(menu, "0", "Permanent", 0);
	Menu.AddItem(menu, "10", "10 Minutes", 0);
	Menu.AddItem(menu, "30", "30 Minutes", 0);
	Menu.AddItem(menu, "60", "1 Hour", 0);
	Menu.AddItem(menu, "240", "4 Hours", 0);
	Menu.AddItem(menu, "1440", "1 Day", 0);
	Menu.AddItem(menu, "10080", "1 Week", 0);
	Menu.Display(menu, client, 0);
	return 0;
}

void:DisplayBanReasonMenu(client)
{
	new Menu:menu = Menu.Menu(31, 28);
	new String:title[400];
	Format(title, 100, "%T: %N", "Ban reason", client, playerinfo[client]);
	Menu.SetTitle(menu, title);
	Menu.ExitBackButton.set(menu, true);
	Menu.AddItem(menu, "", "Custom reason (type in chat)", 0);
	new String:reasonName[400];
	new String:reasonFull[1024];
	KeyValues.GotoFirstSubKey(g_hKvBanReasons, false);
	do {
		KeyValues.GetSectionName(g_hKvBanReasons, reasonName, 100);
		KeyValues.GetString(g_hKvBanReasons, NULL_STRING, reasonFull, 255, "");
		Menu.AddItem(menu, reasonFull, reasonName, 0);
	} while (KeyValues.GotoNextKey(g_hKvBanReasons, false));
	KeyValues.Rewind(g_hKvBanReasons);
	Menu.Display(menu, client, 0);
	return 0;
}

public void:AdminMenu_Ban(TopMenu:topmenu, TopMenuAction:action, TopMenuObject:object_id, param, String:buffer[], maxlength)
{
	playerinfo[param][3] = 0;
	if (action)
	{
		if (action == 2)
		{
			DisplayBanTargetMenu(param);
		}
	}
	else
	{
		Format(buffer[0], maxlength, "%T", "Ban player", param);
	}
	return 0;
}

public Action:Command_AbortBan(client, args)
{
	if (CheckCommandAccess(client, "sm_ban", 8, false))
	{
		if (playerinfo[client][3])
		{
			playerinfo[client][3] = 0;
			ReplyToCommand(client, "[SM] %t", 6568);
		}
		else
		{
			ReplyToCommand(client, "[SM] %t", 6608);
		}
		return 3;
	}
	ReplyToCommand(client, "[SM] %t", 6548);
	return 3;
}

public Action:Command_AddBan(client, args)
{
	if (args < 2)
	{
		ReplyToCommand(client, "[SM] Usage: sm_addban <time> <steamid> [reason]");
		return 3;
	}
	new String:arg_string[1024];
	new String:time[208];
	new String:authid[208];
	GetCmdArgString(arg_string, 256);
	new len;
	new total_len;
	if ((len = BreakString(arg_string, time, 50)) == -1)
	{
		ReplyToCommand(client, "[SM] Usage: sm_addban <time> <steamid> [reason]");
		return 3;
	}
	total_len = len + total_len;
	if ((len = BreakString(arg_string[total_len], authid, 50)) != -1)
	{
		total_len = len + total_len;
	}
	else
	{
		total_len = 0;
		arg_string[0] = '\x00';
	}
	new bool:idValid;
	new var1;
	if (strncmp(authid, "STEAM_", 6, true) && authid[1] == ':')
	{
		idValid = true;
	}
	else
	{
		if (!(strncmp(authid, "[U:", 3, true)))
		{
			idValid = true;
		}
	}
	if (idValid)
	{
		new AdminId:tid = FindAdminByIdentity("steam", authid);
		new var2;
		if (client && CanAdminTarget(GetUserAdmin(client), tid))
		{
			ReplyToCommand(client, "[SM] %t", 6312);
			return 3;
		}
		new minutes = StringToInt(time, 10);
		LogAction(client, -1, "\"%L\" added ban (minutes \"%d\") (id \"%s\") (reason \"%s\")", client, minutes, authid, arg_string[total_len]);
		BanIdentity(authid, minutes, 4, arg_string[total_len], "sm_addban", client);
		ReplyToCommand(client, "[SM] %t", 6400);
		return 3;
	}
	ReplyToCommand(client, "[SM] %t", 6268);
	return 3;
}

public Action:Command_Ban(client, args)
{
	if (args < 2)
	{
		new var1;
		if (GetCmdReplySource() == 1 && client && args)
		{
			DisplayBanTargetMenu(client);
		}
		else
		{
			ReplyToCommand(client, "[SM] Usage: sm_ban <#userid|name> <minutes|0> [reason]");
		}
		return 3;
	}
	new len;
	new next_len;
	new String:Arguments[1024];
	GetCmdArgString(Arguments, 256);
	new String:arg[272];
	len = BreakString(Arguments, arg, 65);
	new target = FindTarget(client, arg, true, true);
	if (target == -1)
	{
		return 3;
	}
	new String:s_time[48];
	if ((next_len = BreakString(Arguments[len], s_time, 12)) != -1)
	{
		len = next_len + len;
	}
	else
	{
		len = 0;
		Arguments[0] = '\x00';
	}
	playerinfo[client][1] = GetClientUserId(target);
	new time = StringToInt(s_time, 10);
	PrepareBan(client, target, time, Arguments[len]);
	return 3;
}

public Action:Command_BanIp(client, args)
{
	if (args < 2)
	{
		ReplyToCommand(client, "[SM] Usage: sm_banip <ip|#userid|name> <time> [reason]");
		return 3;
	}
	new len;
	new next_len;
	new String:Arguments[1024];
	new String:arg[208];
	new String:time[80];
	GetCmdArgString(Arguments, 256);
	len = BreakString(Arguments, arg, 50);
	if ((next_len = BreakString(Arguments[len], time, 20)) != -1)
	{
		len = next_len + len;
	}
	else
	{
		len = 0;
		Arguments[0] = '\x00';
	}
	if (StrEqual(arg, "0", true))
	{
		ReplyToCommand(client, "[SM] %t", 6012);
		return 3;
	}
	new String:target_name[256];
	new target_list[1];
	new bool:tn_is_ml;
	new found_client = -1;
	if (0 < ProcessTargetString(arg, client, target_list, 1, 20, target_name, 64, tn_is_ml))
	{
		found_client = target_list[0];
	}
	new bool:has_rcon;
	new var2;
	if (client && (client == 1 && IsDedicatedServer()))
	{
		has_rcon = true;
	}
	else
	{
		new AdminId:id = GetUserAdmin(client);
		new var3;
		if (id == -1)
		{
			var3 = 0;
		}
		else
		{
			var3 = GetAdminFlag(id, 12, 1);
		}
		has_rcon = var3;
	}
	new hit_client = -1;
	new var5;
	if (found_client != -1 && IsFakeClient(found_client) && (has_rcon || CanUserTarget(client, found_client)))
	{
		GetClientIP(found_client, arg, 50, true);
		hit_client = found_client;
	}
	new var6;
	if (hit_client == -1 && has_rcon)
	{
		ReplyToCommand(client, "[SM] %t", 6040);
		return 3;
	}
	new minutes = StringToInt(time, 10);
	LogAction(client, hit_client, "\"%L\" added ban (minutes \"%d\") (ip \"%s\") (reason \"%s\")", client, minutes, arg, Arguments[len]);
	ReplyToCommand(client, "[SM] %t", 6116);
	BanIdentity(arg, minutes, 2, Arguments[len], "sm_banip", client);
	if (hit_client != -1)
	{
		KickClient(hit_client, "Banned: %s", Arguments[len]);
	}
	return 3;
}

public Action:Command_Unban(client, args)
{
	if (args < 1)
	{
		ReplyToCommand(client, "[SM] Usage: sm_unban <steamid|ip>");
		return 3;
	}
	new String:arg[208];
	GetCmdArgString(arg, 50);
	ReplaceString(arg, 50, "\"", "", true);
	new ban_flags;
	if (IsCharNumeric(arg[0]))
	{
		ban_flags |= 2;
	}
	else
	{
		ban_flags |= 4;
	}
	LogAction(client, -1, "\"%L\" removed ban (filter \"%s\")", client, arg);
	RemoveBan(arg, ban_flags, "sm_unban", client);
	ReplyToCommand(client, "[SM] %t", "Removed bans matching", arg);
	return 3;
}

public MenuHandler_BanPlayerList(Menu:menu, MenuAction:action, param1, param2)
{
	if (action == 16)
	{
		CloseHandle(menu);
		menu = 0;
	}
	else
	{
		if (action == 8)
		{
			new var1;
			if (param2 == -6 && hTopMenu)
			{
				TopMenu.Display(hTopMenu, param1, 3);
			}
		}
		if (action == 4)
		{
			new String:info[128];
			new String:name[128];
			new userid;
			new target;
			Menu.GetItem(menu, param2, info, 32, 0, name, 32);
			userid = StringToInt(info, 10);
			if ((target = GetClientOfUserId(userid)))
			{
				if (CanUserTarget(param1, target))
				{
					playerinfo[param1] = target;
					playerinfo[param1][1] = userid;
					DisplayBanTimeMenu(param1);
				}
				PrintToChat(param1, "[SM] %t", 5340);
			}
			else
			{
				PrintToChat(param1, "[SM] %t", 5304);
			}
		}
	}
	return 0;
}

public MenuHandler_BanReasonList(Menu:menu, MenuAction:action, param1, param2)
{
	if (action == 16)
	{
		CloseHandle(menu);
		menu = 0;
	}
	else
	{
		if (action == 8)
		{
			new var1;
			if (param2 == -6 && hTopMenu)
			{
				TopMenu.Display(hTopMenu, param1, 3);
			}
		}
		if (action == 4)
		{
			if (param2)
			{
				new String:info[256];
				Menu.GetItem(menu, param2, info, 64, 0, "", 0);
				PrepareBan(param1, playerinfo[param1], playerinfo[param1][2], info);
			}
			playerinfo[param1][3] = 1;
			PrintToChat(param1, "[SM] %t", "Custom ban reason explanation", "sm_abortban");
		}
	}
	return 0;
}

public MenuHandler_BanTimeList(Menu:menu, MenuAction:action, param1, param2)
{
	if (action == 16)
	{
		CloseHandle(menu);
		menu = 0;
	}
	else
	{
		if (action == 8)
		{
			new var1;
			if (param2 == -6 && hTopMenu)
			{
				TopMenu.Display(hTopMenu, param1, 3);
			}
		}
		if (action == 4)
		{
			new String:info[128];
			Menu.GetItem(menu, param2, info, 32, 0, "", 0);
			playerinfo[param1][2] = StringToInt(info, 10);
			DisplayBanReasonMenu(param1);
		}
	}
	return 0;
}

public void:OnAdminMenuReady(Handle:aTopMenu)
{
	new TopMenu:topmenu = TopMenu.FromHandle(aTopMenu);
	if (hTopMenu == topmenu)
	{
		return 0;
	}
	hTopMenu = topmenu;
	new TopMenuObject:player_commands = TopMenu.FindCategory(hTopMenu, "PlayerCommands");
	if (player_commands)
	{
		TopMenu.AddItem(hTopMenu, "sm_ban", 17, player_commands, "sm_ban", 8, "");
	}
	return 0;
}

public void:OnClientDisconnect(client)
{
	playerinfo[client][3] = 0;
	return 0;
}

public Action:OnClientSayCommand(client, String:command[], String:sArgs[])
{
	if (playerinfo[client][3])
	{
		playerinfo[client][3] = 0;
		PrepareBan(client, playerinfo[client], playerinfo[client][2], sArgs[0]);
		return 4;
	}
	return 0;
}

public void:OnConfigsExecuted()
{
	LoadBanReasons();
	return 0;
}

public void:OnPluginStart()
{
	BuildPath(0, g_BanReasonsPath, 256, "configs/banreasons.txt");
	LoadBanReasons();
	LoadTranslations("common.phrases");
	LoadTranslations("basebans.phrases");
	LoadTranslations("core.phrases");
	RegAdminCmd("sm_ban", 23, 8, "sm_ban <#userid|name> <minutes|0> [reason]", "", 0);
	RegAdminCmd("sm_unban", 27, 16, "sm_unban <steamid|ip>", "", 0);
	RegAdminCmd("sm_addban", 21, 4096, "sm_addban <time> <steamid> [reason]", "", 0);
	RegAdminCmd("sm_banip", 25, 8, "sm_banip <ip|#userid|name> <time> [reason]", "", 0);
	RegConsoleCmd("sm_abortban", 19, "sm_abortban", 0);
	new TopMenu:topmenu;
	new var1;
	if (LibraryExists("adminmenu") && (topmenu = GetAdminTopMenu()))
	{
		OnAdminMenuReady(topmenu);
	}
	return 0;
}

public void:__ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.BytesLeft.get");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadInt64");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetInt64");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddInt64");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

public void:__ext_topmenus_SetNTVOptional()
{
	MarkNativeAsOptional("CreateTopMenu");
	MarkNativeAsOptional("LoadTopMenuConfig");
	MarkNativeAsOptional("AddToTopMenu");
	MarkNativeAsOptional("RemoveFromTopMenu");
	MarkNativeAsOptional("DisplayTopMenu");
	MarkNativeAsOptional("DisplayTopMenuCategory");
	MarkNativeAsOptional("FindTopMenuCategory");
	MarkNativeAsOptional("SetTopMenuTitleCaching");
	MarkNativeAsOptional("TopMenu.TopMenu");
	MarkNativeAsOptional("TopMenu.FromHandle");
	MarkNativeAsOptional("TopMenu.LoadConfig");
	MarkNativeAsOptional("TopMenu.AddCategory");
	MarkNativeAsOptional("TopMenu.AddItem");
	MarkNativeAsOptional("TopMenu.GetInfoString");
	MarkNativeAsOptional("TopMenu.GetObjName");
	MarkNativeAsOptional("TopMenu.Remove");
	MarkNativeAsOptional("TopMenu.Display");
	MarkNativeAsOptional("TopMenu.DisplayCategory");
	MarkNativeAsOptional("TopMenu.FindCategory");
	MarkNativeAsOptional("TopMenu.CacheTitles.set");
	return 0;
}

public void:__pl_adminmenu_SetNTVOptional()
{
	MarkNativeAsOptional("GetAdminTopMenu");
	MarkNativeAsOptional("AddTargetsToMenu");
	MarkNativeAsOptional("AddTargetsToMenu2");
	return 0;
}

