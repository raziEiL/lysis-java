new PLUGIN_VERSION[21] =
{
	49, 46, 49, 32, 36, 82, 101, 118, 105, 115, 105, 111, 110, 58, 32, 50, 57, 48, 32, 36, 0
};
new MENU_CHOOSEMAP[18] =
{
	103, 97, 108, 95, 109, 101, 110, 117, 67, 104, 111, 111, 115, 101, 77, 97, 112, 0
};
new DIR_CONFIGS[64];
new DIR_DATA[64];
new CLR_RED[3];
new CLR_WHITE[3];
new CLR_YELLOW[3];
new CLR_GREY[3];
new bool:g_wasLastRound;
new g_mapPrefix[32][16];
new g_mapPrefixCnt = 1;
new g_currentMap[32];
new Float:g_originalTimelimit = -1082130432;
new g_nomination[33][6];
new g_nominationCnt;
new g_nominationMatchesMenu[32];
new g_voteWeightFlags[32];
new Array:g_emptyCycleMap;
new bool:g_isUsingEmptyCycle;
new g_emptyMapCnt;
new Array:g_mapCycle;
new g_recentMap[16][32];
new g_cntRecentMap;
new Array:g_nominationMap;
new g_nominationMapCnt;
new Array:g_fillerMap;
new Float:g_rtvWait;
new bool:g_rockedVote[33];
new g_rockedVoteCnt;
new g_mapChoice[9][32];
new g_choiceCnt;
new g_choiceMax;
new bool:g_voted[33] =
{
	1, ...
};
new g_mapVote[9];
new g_voteStatus;
new g_voteDuration;
new g_votesCast;
new g_runoffChoice[2];
new g_vote[512];
new bool:g_handleMapChange = 1;
new g_refreshVoteStatus = 1;
new g_voteTallyType[3];
new g_snuffDisplay[33];
new g_menuChooseMap;
new g_pauseMapEndVoteTask;
new g_pauseMapEndManagerTask;
new cvar_extendmapMax;
new cvar_extendmapStep;
new cvar_endOnRound;
new cvar_endOfMapVote;
new cvar_rtvWait;
new cvar_rtvRatio;
new cvar_rtvCommands;
new cvar_cmdVotemap;
new cvar_cmdListmaps;
new cvar_listmapsPaginate;
new cvar_banRecent;
new cvar_banRecentStyle;
new cvar_voteDuration;
new cvar_nomMapFile;
new cvar_nomPrefixes;
new cvar_nomQtyUsed;
new cvar_nomPlayerAllowance;
new cvar_voteExpCountdown;
new cvar_voteWeightFlags;
new cvar_voteWeight;
new cvar_voteMapChoiceCnt;
new cvar_voteAnnounceChoice;
new cvar_voteUniquePrefixes;
new cvar_voteMapFile;
new cvar_rtvReminder;
new cvar_srvStart;
new cvar_emptyWait;
new cvar_emptyMapFile;
new cvar_emptyCycle;
new cvar_runoffEnabled;
new cvar_runoffDuration;
new cvar_voteStatus;
new cvar_voteStatusType;
new cvar_soundsMute;
bool:operator!=(Float:,Float:)(Float:oper1, Float:oper2)
{
	return floatcmp(oper1, oper2) != 0;
}

bool:operator>(Float:,Float:)(Float:oper1, Float:oper2)
{
	return 0 < floatcmp(oper1, oper2);
}

bool:operator>=(Float:,Float:)(Float:oper1, Float:oper2)
{
	return 0 <= floatcmp(oper1, oper2);
}

bool:operator<(Float:,Float:)(Float:oper1, Float:oper2)
{
	return 0 > floatcmp(oper1, oper2);
}

bool:operator<=(Float:,Float:)(Float:oper1, Float:oper2)
{
	return 0 >= floatcmp(oper1, oper2);
}

bool:operator!(Float:)(Float:oper)
{
	return oper & -1 == 0;
}

Float:floatmin(Float:ValueA, Float:ValueB)
{
	if (ValueA <= ValueB)
	{
		return ValueA;
	}
	return ValueB;
}

Float:floatmax(Float:ValueA, Float:ValueB)
{
	if (ValueA >= ValueB)
	{
		return ValueA;
	}
	return ValueB;
}

is_user_admin(id)
{
	new __flags = get_user_flags(id, PLUGIN_VERSION);
	new var1;
	return __flags > 0 && !__flags & 33554432;
}

cmd_access(id, level, cid, num, bool:accesssilent)
{
	new has_access;
	new var1;
	if (is_dedicated_server())
	{
		var1 = 0;
	}
	else
	{
		var1 = 1;
	}
	if (var1 == id)
	{
		has_access = 1;
	}
	else
	{
		if (level == 16777216)
		{
			if (is_user_admin(id))
			{
				has_access = 1;
			}
		}
		if (level & get_user_flags(id, PLUGIN_VERSION))
		{
			has_access = 1;
		}
		if (!level)
		{
			has_access = 1;
		}
	}
	if (has_access)
	{
		if (num > read_argc())
		{
			new hcmd[32];
			new hinfo[128];
			new hflag;
			get_concmd(cid, hcmd, 31, hflag, hinfo, 127, level, -1);
			console_print(id, "%L:  %s %s", id, "USAGE", hcmd, hinfo);
			return 0;
		}
		return 1;
	}
	if (!accesssilent)
	{
		console_print(id, "%L", id, "NO_ACC_COM");
	}
	return 0;
}

colored_menus()
{
	new mod_name[32];
	get_modname(mod_name, 31);
	new var1;
	return equal(mod_name, "cstrike", PLUGIN_VERSION) || equal(mod_name, "czero", PLUGIN_VERSION) || equal(mod_name, "dod", PLUGIN_VERSION);
}

get_configsdir(name[], len)
{
	return get_localinfo("amxx_configsdir", name, len);
}

get_datadir(name[], len)
{
	return get_localinfo("amxx_datadir", name, len);
}

has_flag(id, flags[])
{
	return read_flags(flags) & get_user_flags(id, PLUGIN_VERSION);
}

public plugin_init()
{
	new jnk[1];
	new version[8];
	new rev[8];
	parse(PLUGIN_VERSION, version, 7, jnk, 0, rev, 7, jnk, 0);
	new pluginVersion[16];
	formatex(pluginVersion, 15, "%s.%s", version, rev);
	register_plugin("Galileo", pluginVersion, "Brad Jones");
	register_cvar("gal_version", pluginVersion, 68, PLUGIN_VERSION);
	set_cvar_string("gal_version", pluginVersion);
	register_cvar("gal_server_starting", 10820, 64, PLUGIN_VERSION);
	cvar_emptyCycle = register_cvar("gal_in_empty_cycle", 10904, 64, PLUGIN_VERSION);
	register_cvar("gal_debug", 10952, PLUGIN_VERSION, PLUGIN_VERSION);
	register_dictionary("common.txt");
	register_dictionary("nextmap.txt");
	register_dictionary("galileo.txt");
	if (module_exists("cstrike"))
	{
		register_event("HLTV", "event_round_start", 11224, "1=0", "2=0");
	}
	else
	{
		if (module_exists("dodx"))
		{
			register_event("RoundState", "event_round_start", 11400, "1=1");
		}
	}
	register_event("TextMsg", "event_game_commencing", 11544, "2=#Game_Commencing", "2=#Game_will_restart_in");
	register_event("30", "event_intermission", 11812, 11820);
	g_menuChooseMap = register_menuid(MENU_CHOOSEMAP, PLUGIN_VERSION);
	register_menucmd(g_menuChooseMap, 1023, "vote_handleChoice");
	register_clcmd("say", "cmd_say", -1, 11944, -1);
	register_clcmd("say nextmap", "cmd_nextmap", PLUGIN_VERSION, "- displays nextmap", -1);
	register_clcmd("say currentmap", "cmd_currentmap", PLUGIN_VERSION, "- display current map", -1);
	register_clcmd("say ff", "cmd_ff", PLUGIN_VERSION, "- display friendly fire status", -1);
	register_clcmd("votemap", "cmd_HL1_votemap", -1, 11944, -1);
	register_clcmd("listmaps", "cmd_HL1_listmaps", -1, 11944, -1);
	register_concmd("gal_startvote", "cmd_startVote", 32, 12820, -1);
	register_concmd("gal_createmapfile", "cmd_createMapFile", 2048, 12820, -1);
	register_cvar("amx_nextmap", 13016, 76, PLUGIN_VERSION);
	cvar_extendmapMax = register_cvar("amx_extendmap_max", "90", PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_extendmapStep = register_cvar("amx_extendmap_step", "15", PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_cmdVotemap = register_cvar("gal_cmd_votemap", 13256, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_cmdListmaps = register_cvar("gal_cmd_listmaps", 13332, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_listmapsPaginate = register_cvar("gal_listmaps_paginate", "10", PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_banRecent = register_cvar("gal_banrecent", 13496, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_banRecentStyle = register_cvar("gal_banrecentstyle", 13580, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_endOnRound = register_cvar("gal_endonround", 13648, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_endOfMapVote = register_cvar("gal_endofmapvote", 13724, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_emptyWait = register_cvar("gal_emptyserver_wait", 13816, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_emptyMapFile = register_cvar("gal_emptyserver_mapfile", 13920, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_srvStart = register_cvar("gal_srv_start", 13980, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_rtvCommands = register_cvar("gal_rtv_commands", 14056, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_rtvWait = register_cvar("gal_rtv_wait", "10", PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_rtvRatio = register_cvar("gal_rtv_ratio", "0.60", PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_rtvReminder = register_cvar("gal_rtv_reminder", 14272, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_nomPlayerAllowance = register_cvar("gal_nom_playerallowance", 14376, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_nomMapFile = register_cvar("gal_nom_mapfile", "mapcycle", PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_nomPrefixes = register_cvar("gal_nom_prefixes", 14552, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_nomQtyUsed = register_cvar("gal_nom_qtyused", 14624, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_voteWeight = register_cvar("gal_vote_weight", 14696, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_voteWeightFlags = register_cvar("gal_vote_weightflags", 14788, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_voteMapFile = register_cvar("gal_vote_mapfile", "mapcycle.txt", PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_voteDuration = register_cvar("gal_vote_duration", "15", PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_voteExpCountdown = register_cvar("gal_vote_expirationcountdown", 15116, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_voteMapChoiceCnt = register_cvar("gal_vote_mapchoices", 15204, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_voteAnnounceChoice = register_cvar("gal_vote_announcechoice", 15308, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_voteStatus = register_cvar("gal_vote_showstatus", 15396, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_voteStatusType = register_cvar("gal_vote_showstatustype", 15500, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_voteUniquePrefixes = register_cvar("gal_vote_uniqueprefixes", 15604, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_runoffEnabled = register_cvar("gal_runoff_enabled", 15688, PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_runoffDuration = register_cvar("gal_runoff_duration", "10", PLUGIN_VERSION, PLUGIN_VERSION);
	cvar_soundsMute = register_cvar("gal_sounds_mute", 15852, PLUGIN_VERSION, PLUGIN_VERSION);
	return 0;
}

public dbg_fakeVotes()
{
	if (!g_voteStatus & 4)
	{
		new var1 = g_mapVote;
		var1[0] = var1[0] + 2;
		g_mapVote[1] += 0;
		g_mapVote[2] += 6;
		g_mapVote[3] += 0;
		g_mapVote[4] += 0;
		g_mapVote[5] += 4;
		g_votesCast = g_mapVote[5] + g_mapVote[4] + g_mapVote[3] + g_mapVote[2] + g_mapVote[1] + g_mapVote[0];
	}
	else
	{
		if (g_voteStatus & 4)
		{
			new var2 = g_mapVote;
			var2[0] = var2[0] + 1;
			g_mapVote[1] += 0;
			g_votesCast = g_mapVote[1] + g_mapVote[0];
		}
	}
	return 0;
}

public plugin_cfg()
{
	formatex(DIR_CONFIGS[get_configsdir(DIR_CONFIGS, 63)], 63, "/galileo");
	formatex(DIR_DATA[get_datadir(DIR_DATA, 63)], 63, "/galileo");
	server_cmd("exec %s/galileo.cfg", DIR_CONFIGS);
	server_exec();
	if (colored_menus())
	{
		copy(CLR_RED, 2, "\r");
		copy(CLR_WHITE, 2, "\w");
		copy(CLR_YELLOW, 2, "\y");
	}
	g_rtvWait = get_pcvar_float(cvar_rtvWait);
	get_pcvar_string(cvar_voteWeightFlags, g_voteWeightFlags, 31);
	get_mapname(g_currentMap, 31);
	g_choiceMax = max(min(8, get_pcvar_num(cvar_voteMapChoiceCnt)), 2);
	g_fillerMap = ArrayCreate(32, 32);
	g_nominationMap = ArrayCreate(32, 32);
	nomination_clearAll();
	if (get_pcvar_num(cvar_banRecent))
	{
		register_clcmd("say recentmaps", "cmd_listrecent", PLUGIN_VERSION, 11944, -1);
		map_loadRecentList();
		new var1;
		if (get_cvar_num("gal_server_starting") && get_pcvar_num(cvar_srvStart))
		{
			map_writeRecentList();
		}
	}
	if (get_pcvar_num(cvar_rtvCommands) & 1)
	{
		register_clcmd("say rockthevote", "cmd_rockthevote", PLUGIN_VERSION, 11944, -1);
	}
	if (get_pcvar_num(cvar_nomPlayerAllowance))
	{
		register_concmd("gal_listmaps", "cmd_listmaps", -1, 12820, -1);
		register_clcmd("say nominations", "cmd_nominations", PLUGIN_VERSION, "- displays current nominations for next map", -1);
		if (get_pcvar_num(cvar_nomPrefixes))
		{
			map_loadPrefixList();
		}
		map_loadNominationList();
	}
	new mapName[32];
	get_mapname(mapName, 31);
	dbg_log(6, "[%s]", mapName);
	dbg_log(6, 16804);
	if (get_cvar_num("gal_server_starting"))
	{
		srv_handleStart();
	}
	set_task(1092616192, "vote_setupEnd", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
	if (get_pcvar_num(cvar_emptyWait))
	{
		g_emptyCycleMap = ArrayCreate(32, 32);
		map_loadEmptyCycleList();
		set_task(1114636288, "srv_initEmptyCheck", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
	}
	return 0;
}

public plugin_end()
{
	map_restoreOriginalTimeLimit();
	return 0;
}

public vote_setupEnd()
{
	dbg_log(4, "%32s mp_timelimit: %f  g_originalTimelimit: %f", "vote_setupEnd(in)", get_cvar_float("mp_timelimit"), g_originalTimelimit);
	g_originalTimelimit = get_cvar_float("mp_timelimit");
	new nextMap[32];
	if (get_pcvar_num(cvar_endOfMapVote))
	{
		formatex(nextMap, 31, "%L", 0, "GAL_NEXTMAP_UNKNOWN");
	}
	else
	{
		g_mapCycle = ArrayCreate(32, 32);
		map_populateList(g_mapCycle, "mapcycle.txt");
		map_getNext(g_mapCycle, g_currentMap, nextMap);
	}
	map_setNext(nextMap);
	if (g_originalTimelimit)
	{
		set_task(1097859072, "vote_manageEnd", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 17596, PLUGIN_VERSION);
	}
	dbg_log(2, "%32s mp_timelimit: %f  g_originalTimelimit: %f", "vote_setupEnd(out)", get_cvar_float("mp_timelimit"), g_originalTimelimit);
	return 0;
}

map_getNext(Array:mapArray, currentMap[], nextMap[32])
{
	new thisMap[32];
	new mapCnt = ArraySize(mapArray);
	new nextmapIdx;
	new returnVal = -1;
	new mapIdx;
	while (mapIdx < mapCnt)
	{
		ArrayGetString(mapArray, mapIdx, thisMap, 31);
		if (equal(currentMap, thisMap, PLUGIN_VERSION))
		{
			new var1;
			if (mapCnt + -1 == mapIdx)
			{
				var1 = 0;
			}
			else
			{
				var1 = mapIdx + 1;
			}
			nextmapIdx = var1;
			returnVal = nextmapIdx;
			ArrayGetString(mapArray, nextmapIdx, nextMap, 31);
			return returnVal;
		}
		mapIdx++;
	}
	ArrayGetString(mapArray, nextmapIdx, nextMap, 31);
	return returnVal;
}

public srv_handleStart()
{
	set_cvar_num("gal_server_starting", PLUGIN_VERSION);
	new startAction = get_pcvar_num(cvar_srvStart);
	if (startAction)
	{
		new nextMap[32];
		new var1;
		if (startAction == 1 || startAction == 2)
		{
			new filename[256];
			formatex(filename, 255, "%s/info.dat", DIR_DATA);
			new file = fopen(filename, "rt");
			if (file)
			{
				fgets(file, nextMap, 31);
				if (startAction == 2)
				{
					nextMap[0] = 0;
					fgets(file, nextMap, 31);
				}
			}
			fclose(file);
		}
		else
		{
			if (startAction == 4)
			{
				if (!(get_pcvar_num(cvar_nomPlayerAllowance)))
				{
					map_loadNominationList();
				}
				if (g_nominationMapCnt)
				{
					ArrayGetString(g_nominationMap, random_num(PLUGIN_VERSION, g_nominationMapCnt + -1), nextMap, 31);
				}
			}
		}
		trim(nextMap);
		new var2;
		if (nextMap[0] && is_map_valid(nextMap))
		{
			server_cmd("changelevel %s", nextMap);
		}
		else
		{
			vote_manageEarlyStart();
		}
	}
	return 0;
}

vote_manageEarlyStart()
{
	g_voteStatus = g_voteStatus | 16;
	set_task(1123024896, "vote_startDirector", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
	return 0;
}

map_setNext(nextMap[])
{
	set_cvar_string("amx_nextmap", nextMap);
	new filename[256];
	formatex(filename, 255, "%s/info.dat", DIR_DATA);
	new file = fopen(filename, "wt");
	if (file)
	{
		fprintf(file, "%s", g_currentMap);
		fprintf(file, "\n%s", nextMap);
		fclose(file);
	}
	return 0;
}

public vote_manageEnd()
{
	new secondsLeft = get_timeleft();
	new var1;
	if (secondsLeft < 150 && secondsLeft > 90 && !g_pauseMapEndVoteTask && get_pcvar_num(cvar_endOfMapVote) && !get_pcvar_num(cvar_emptyCycle))
	{
		vote_startDirector(false);
	}
	new var2;
	if (secondsLeft < 20 && !g_pauseMapEndManagerTask)
	{
		map_manageEnd();
	}
	return 0;
}

public map_loadRecentList()
{
	new filename[256];
	formatex(filename, 255, "%s/recentmaps.dat", DIR_DATA);
	new file = fopen(filename, "rt");
	if (file)
	{
		new buffer[32];
		while (!feof(file))
		{
			fgets(file, buffer, 31);
			trim(buffer);
			if (buffer[0])
			{
				if (!(get_pcvar_num(cvar_banRecent) == g_cntRecentMap))
				{
					g_cntRecentMap += 1;
					copy(g_recentMap[g_cntRecentMap], 31, buffer);
				}
				fclose(file);
			}
		}
		fclose(file);
	}
	return 0;
}

public map_writeRecentList()
{
	new filename[256];
	formatex(filename, 255, "%s/recentmaps.dat", DIR_DATA);
	new file = fopen(filename, "wt");
	if (file)
	{
		fprintf(file, "%s", g_currentMap);
		new idxMap;
		while (get_pcvar_num(cvar_banRecent) - 1 > idxMap)
		{
			fprintf(file, "\n%s", g_recentMap[idxMap]);
			idxMap++;
		}
		fclose(file);
	}
	return 0;
}

public map_loadFillerList(filename[])
{
	return map_populateList(g_fillerMap, filename);
}

public cmd_rockthevote(id)
{
	client_print(id, "", "%L", id, "GAL_CMD_RTV");
	vote_rock(id);
	return 0;
}

public cmd_nominations(id)
{
	client_print(id, "", "%L", id, "GAL_CMD_NOMS");
	nomination_list(id);
	return 0;
}

public cmd_nextmap(id)
{
	new map[32];
	get_cvar_string("amx_nextmap", map, 31);
	client_print(PLUGIN_VERSION, "", "%L %s", -1, "NEXT_MAP", map);
	return 0;
}

public cmd_currentmap(id)
{
	client_print(PLUGIN_VERSION, "", "%L: %s", -1, "PLAYED_MAP", g_currentMap);
	return 0;
}

public cmd_listrecent(id)
{
	switch (get_pcvar_num(cvar_banRecentStyle))
	{
		case 1:
		{
			new msg[101];
			new msgIdx;
			new idx;
			while (idx < g_cntRecentMap)
			{
				msgIdx = format(msg[msgIdx], 100 - msgIdx, ", %s", g_recentMap[idx]) + msgIdx;
				idx++;
			}
			client_print(PLUGIN_VERSION, "", "%L: %s", -1, "GAL_MAP_RECENTMAPS", msg[2]);
		}
		case 2:
		{
			new idx;
			while (idx < g_cntRecentMap)
			{
				client_print(PLUGIN_VERSION, "", "%L (%i): %s", -1, "GAL_MAP_RECENTMAP", idx + 1, g_recentMap[idx]);
				idx++;
			}
		}
		default:
		{
		}
	}
	return 1;
}

public cmd_startVote(id, level, cid)
{
	if (!cmd_access(id, level, cid, 1, false))
	{
		return 1;
	}
	if (g_voteStatus & 1)
	{
		client_print(id, "", "%L", id, "GAL_VOTE_INPROGRESS");
	}
	else
	{
		if (g_voteStatus & 8)
		{
			client_print(id, "", "%L", id, "GAL_VOTE_ENDED");
		}
		if (read_argc() == 2)
		{
			new arg[32];
			read_args(arg, 31);
			if (equali(arg, "-nochange", PLUGIN_VERSION))
			{
				g_handleMapChange = false;
			}
		}
		vote_startDirector(true);
	}
	return 1;
}

map_populateList(Array:mapArray, mapFilename[])
{
	ArrayClear(mapArray);
	new mapCnt;
	if (!equal(mapFilename, 19280, PLUGIN_VERSION))
	{
		new file = fopen(mapFilename, "rt");
		if (file)
		{
			new buffer[32];
			while (!feof(file))
			{
				fgets(file, buffer, 31);
				trim(buffer);
				new var1;
				if (buffer[0] && !equal(buffer, "//", 2) && !equal(buffer, 19312, 1) && is_map_valid(buffer))
				{
					ArrayPushString(mapArray, buffer);
					mapCnt++;
				}
			}
			fclose(file);
		}
		else
		{
			log_error(19, "%L", 0, "GAL_MAPS_FILEMISSING", mapFilename);
		}
	}
	else
	{
		new dir;
		new mapName[32];
		dir = open_dir("maps", mapName, 31);
		if (dir)
		{
			new lenMapName;
			while (next_file(dir, mapName, 31))
			{
				lenMapName = strlen(mapName);
				new var2;
				if (lenMapName > 4 && equali(mapName[lenMapName + -4], ".bsp", 4))
				{
					mapName[lenMapName + -4] = 0;
					if (is_map_valid(mapName))
					{
						ArrayPushString(mapArray, mapName);
						mapCnt++;
					}
				}
			}
			close_dir(dir);
		}
		else
		{
			log_error(19, "%L", 0, "GAL_MAPS_FOLDERMISSING");
		}
	}
	return mapCnt;
}

public map_loadNominationList()
{
	new filename[256];
	get_pcvar_string(cvar_nomMapFile, filename, 255);
	g_nominationMapCnt = map_populateList(g_nominationMap, filename);
	return 0;
}

public cmd_ff()
{
	new var1;
	if (get_cvar_num("mp_friendlyfire"))
	{
		var1 = 19700;
	}
	else
	{
		var1 = 19712;
	}
	client_print(PLUGIN_VERSION, "", "%L: %L", -1, "FRIEND_FIRE", -1, var1);
	return 0;
}

public cmd_createMapFile(id, level, cid)
{
	if (!cmd_access(id, level, cid, 1, false))
	{
		return 1;
	}
	new cntArg = read_argc() - 1;
	switch (cntArg)
	{
		case 1:
		{
			new arg1[256];
			read_argv(1, arg1, 255);
			remove_quotes(arg1);
			new mapName[36];
			new dir;
			new file;
			new mapCnt;
			new lenMapName;
			dir = open_dir("maps", mapName, 35);
			if (dir)
			{
				new filename[256];
				formatex(filename, 255, "%s/%s", DIR_CONFIGS, arg1);
				file = fopen(filename, "wt");
				if (file)
				{
					mapCnt = 0;
					while (next_file(dir, mapName, 35))
					{
						lenMapName = strlen(mapName);
						new var1;
						if (lenMapName > 4 && equali(mapName[lenMapName + -4], ".bsp", 4))
						{
							mapName[lenMapName + -4] = 0;
							if (is_map_valid(mapName))
							{
								mapCnt++;
								fprintf(file, "%s\n", mapName);
							}
						}
					}
					fclose(file);
					con_print(id, "%L", 0, "GAL_CREATIONSUCCESS", filename, mapCnt);
				}
				else
				{
					con_print(id, "%L", 0, "GAL_CREATIONFAILED", filename);
				}
				close_dir(dir);
			}
			else
			{
				con_print(id, "%L", 0, "GAL_MAPSFOLDERMISSING");
			}
		}
		default:
		{
			con_print(id, "%L", id, "GAL_CMD_CREATEFILE_USAGE1");
			con_print(id, "%L", id, "GAL_CMD_CREATEFILE_USAGE2");
		}
	}
	return 1;
}

public map_loadPrefixList()
{
	new filename[256];
	formatex(filename, 255, "%s/prefixes.ini", DIR_CONFIGS);
	new file = fopen(filename, "rt");
	if (file)
	{
		new buffer[16];
		while (!feof(file))
		{
			fgets(file, buffer, 15);
			new var1;
			if (buffer[0] && !equal(buffer, "//", 2))
			{
				if (g_mapPrefixCnt <= 32)
				{
					trim(buffer);
					g_mapPrefixCnt += 1;
					copy(g_mapPrefix[g_mapPrefixCnt], 15, buffer);
				}
				log_error(4, "%L", 0, "GAL_PREFIXES_TOOMANY", 32, filename);
				fclose(file);
			}
		}
		fclose(file);
	}
	else
	{
		log_error(19, "%L", 0, "GAL_PREFIXES_NOTFOUND", filename);
	}
	return 1;
}

map_loadEmptyCycleList()
{
	new filename[256];
	get_pcvar_string(cvar_emptyMapFile, filename, 255);
	g_emptyMapCnt = map_populateList(g_emptyCycleMap, filename);
	return 0;
}

public map_manageEnd()
{
	dbg_log(2, "%32s mp_timelimit: %f", "map_manageEnd(in)", get_cvar_float("mp_timelimit"));
	g_pauseMapEndManagerTask = 1;
	if (1 >= get_realplayersnum())
	{
		map_change();
	}
	else
	{
		new var1;
		if (get_pcvar_num(cvar_endOnRound) && g_wasLastRound)
		{
			g_wasLastRound = true;
			if (g_voteStatus & 2)
			{
				client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_CHANGE_NEXTROUND");
			}
			else
			{
				client_print(PLUGIN_VERSION, "", "%L %L", -1, "GAL_CHANGE_TIMEEXPIRED", -1, "GAL_CHANGE_NEXTROUND");
			}
			server_cmd("mp_timelimit 0");
		}
		else
		{
			message_begin(2, 30, 21184, PLUGIN_VERSION);
			message_end();
			set_task(floatmax(get_cvar_float("mp_chattime"), 2.0), "map_change", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
		}
		new map[32];
		get_cvar_string("amx_nextmap", map, 31);
		client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_NEXTMAP", map);
	}
	dbg_log(2, "%32s mp_timelimit: %f", "map_manageEnd(out)", get_cvar_float("mp_timelimit"));
	return 0;
}

public event_round_start()
{
	if (g_wasLastRound)
	{
		map_manageEnd();
	}
	return 0;
}

public event_game_commencing()
{
	map_restoreOriginalTimeLimit();
	return 0;
}

public event_intermission()
{
	g_pauseMapEndManagerTask = 1;
	set_task(floatmax(get_cvar_float("mp_chattime"), 2.0), "map_change", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
	return 0;
}

map_getIdx(text[])
{
	new map[32];
	new mapIdx;
	new nominationMap[32];
	new prefixIdx;
	while (prefixIdx < g_mapPrefixCnt)
	{
		formatex(map, 31, "%s%s", g_mapPrefix[prefixIdx], text);
		mapIdx = 0;
		while (mapIdx < g_nominationMapCnt)
		{
			ArrayGetString(g_nominationMap, mapIdx, nominationMap, 31);
			if (equal(map, nominationMap, PLUGIN_VERSION))
			{
				return mapIdx;
			}
			mapIdx++;
		}
		prefixIdx++;
	}
	return -1;
}

public cmd_say(id)
{
	static arg3[2];
	static arg2[32];
	static arg1[32];
	static text[70];
	read_args(text, 69);
	remove_quotes(text);
	arg1[0] = 0;
	arg2[0] = 0;
	arg3[0] = 0;
	parse(text, arg1, 31, arg2, 31, arg3, 1);
	if (!arg3[0])
	{
		new idxMap;
		if (arg2[0])
		{
			if (get_pcvar_num(cvar_nomPlayerAllowance))
			{
				new var4;
				if (equali(arg1, "nominate", PLUGIN_VERSION) || equali(arg1, "nom", PLUGIN_VERSION))
				{
					nomination_attempt(id, arg2);
					return 1;
				}
				if (equali(arg1, "cancel", PLUGIN_VERSION))
				{
					idxMap = map_getIdx(arg2);
					if (0 <= idxMap)
					{
						nomination_cancel(id, idxMap);
						return 1;
					}
				}
			}
		}
		else
		{
			new var1;
			if ((get_pcvar_num(cvar_rtvCommands) & 2 && equali(arg1, "rtv", PLUGIN_VERSION)) || (get_pcvar_num(cvar_rtvCommands) & 4 && equali(arg1, "rockthe", 7) && equali(arg1[strlen(arg1) - 4], "vote", PLUGIN_VERSION)))
			{
				vote_rock(id);
				return 1;
			}
			if (get_pcvar_num(cvar_nomPlayerAllowance))
			{
				if (equali(arg1, "noms", PLUGIN_VERSION))
				{
					nomination_list(id);
					return 1;
				}
				idxMap = map_getIdx(arg1);
				if (0 <= idxMap)
				{
					nomination_toggle(id, idxMap);
					return 1;
				}
			}
		}
	}
	return 0;
}

nomination_attempt(id, nomination[])
{
	strtolower(nomination);
	g_nominationMatchesMenu[id] = menu_create("Nominate Map", "nomination_handleMatchChoice", PLUGIN_VERSION);
	new mapIdx;
	new nominationMap[32];
	new matchCnt;
	new matchIdx = -1;
	new info[1];
	new choice[64];
	new disabledReason[16];
	mapIdx = 0;
	while (mapIdx < g_nominationMapCnt && matchCnt <= 1000)
	{
		ArrayGetString(g_nominationMap, mapIdx, nominationMap, 31);
		if (-1 < contain(nominationMap, nomination))
		{
			matchCnt++;
			matchIdx = mapIdx;
			info[0] = mapIdx;
			disabledReason[0] = 0;
			if (nomination_getPlayer(mapIdx))
			{
				formatex(disabledReason, 15, "%L", id, "GAL_MATCH_NOMINATED");
			}
			else
			{
				if (map_isTooRecent(nominationMap))
				{
					formatex(disabledReason, 15, "%L", id, "GAL_MATCH_TOORECENT");
				}
				if (equal(g_currentMap, nominationMap, PLUGIN_VERSION))
				{
					formatex(disabledReason, 15, "%L", id, "GAL_MATCH_CURRENTMAP");
				}
			}
			formatex(choice, 63, "%s %s", nominationMap, disabledReason);
			new var2;
			if (disabledReason[0])
			{
				var2 = 67108864;
			}
			else
			{
				var2 = 0;
			}
			menu_additem(g_nominationMatchesMenu[id], choice, info, var2, -1);
		}
		mapIdx++;
	}
	switch (matchCnt)
	{
		case 0:
		{
			client_print(id, "", "%L", id, "GAL_NOM_FAIL_NOMATCHES", nomination);
		}
		case 1:
		{
			map_nominate(id, matchIdx, -1);
		}
		default:
		{
			client_print(id, "", "%L", id, "GAL_NOM_MATCHES", nomination);
			if (matchCnt == 1000)
			{
				client_print(id, "", "%L", id, "GAL_NOM_MATCHES_MAX", 1000, 1000);
			}
			menu_display(id, g_nominationMatchesMenu[id], PLUGIN_VERSION);
		}
	}
	return 0;
}

public nomination_handleMatchChoice(id, menu, item)
{
	if (0 > item)
	{
		return 0;
	}
	new mapIdx;
	new info[1];
	new access;
	new callback;
	menu_item_getinfo(g_nominationMatchesMenu[id], item, access, info, 1, {0}, PLUGIN_VERSION, callback);
	mapIdx = info[0];
	map_nominate(id, mapIdx, -1);
	return 1;
}

nomination_getPlayer(idxMap)
{
	new idxNomination;
	new playerNominationMax = min(get_pcvar_num(cvar_nomPlayerAllowance), 5);
	new idPlayer = 1;
	while (idPlayer <= 32)
	{
		idxNomination = 1;
		while (idxNomination <= playerNominationMax)
		{
			if (g_nomination[idPlayer][idxNomination] == idxMap)
			{
				return idPlayer;
			}
			idxNomination++;
		}
		idPlayer++;
	}
	return 0;
}

nomination_toggle(id, idxMap)
{
	new idNominator = nomination_getPlayer(idxMap);
	if (id == idNominator)
	{
		nomination_cancel(id, idxMap);
	}
	else
	{
		map_nominate(id, idxMap, idNominator);
	}
	return 0;
}

nomination_cancel(id, idxMap)
{
	if (g_voteStatus & 1)
	{
		client_print(id, "", "%L", id, "GAL_CANCEL_FAIL_INPROGRESS");
		return 0;
	}
	if (g_voteStatus & 8)
	{
		client_print(id, "", "%L", id, "GAL_CANCEL_FAIL_VOTEOVER");
		return 0;
	}
	new bool:nominationFound;
	new idxNomination;
	new playerNominationMax = min(get_pcvar_num(cvar_nomPlayerAllowance), 5);
	idxNomination = 1;
	while (idxNomination <= playerNominationMax)
	{
		if (idxMap == g_nomination[id][idxNomination])
		{
			nominationFound = true;
			new mapName[32];
			ArrayGetString(g_nominationMap, idxMap, mapName, 31);
			if (nominationFound)
			{
				g_nomination[id][idxNomination] = -1;
				g_nominationCnt -= 1;
				nomination_announceCancellation(mapName);
			}
			else
			{
				new idNominator = nomination_getPlayer(idxMap);
				if (idNominator)
				{
					new name[32];
					get_user_name(idNominator, name, 31);
					client_print(id, "", "%L", id, "GAL_CANCEL_FAIL_SOMEONEELSE", mapName, name);
				}
				else
				{
					client_print(id, "", "%L", id, "GAL_CANCEL_FAIL_WASNOTYOU", mapName);
				}
			}
			return 0;
		}
		idxNomination++;
	}
	new mapName[32];
	ArrayGetString(g_nominationMap, idxMap, mapName, 31);
	if (nominationFound)
	{
		g_nomination[id][idxNomination] = -1;
		g_nominationCnt -= 1;
		nomination_announceCancellation(mapName);
	}
	else
	{
		new idNominator = nomination_getPlayer(idxMap);
		if (idNominator)
		{
			new name[32];
			get_user_name(idNominator, name, 31);
			client_print(id, "", "%L", id, "GAL_CANCEL_FAIL_SOMEONEELSE", mapName, name);
		}
		else
		{
			client_print(id, "", "%L", id, "GAL_CANCEL_FAIL_WASNOTYOU", mapName);
		}
	}
	return 0;
}

map_nominate(id, idxMap, idNominator)
{
	if (g_voteStatus & 1)
	{
		client_print(id, "", "%L", id, "GAL_NOM_FAIL_INPROGRESS");
		return 0;
	}
	if (g_voteStatus & 8)
	{
		client_print(id, "", "%L", id, "GAL_NOM_FAIL_VOTEOVER");
		return 0;
	}
	new mapName[32];
	ArrayGetString(g_nominationMap, idxMap, mapName, 31);
	if (equal(g_currentMap, mapName, PLUGIN_VERSION))
	{
		client_print(id, "", "%L", id, "GAL_NOM_FAIL_CURRENTMAP", g_currentMap);
		return 0;
	}
	if (map_isTooRecent(mapName))
	{
		client_print(id, "", "%L", id, "GAL_NOM_FAIL_TOORECENT", mapName);
		client_print(id, "", "%L", id, "GAL_NOM_FAIL_TOORECENT_HLP");
		return 0;
	}
	if (idNominator == -1)
	{
		idNominator = nomination_getPlayer(idxMap);
	}
	if (idNominator)
	{
		if (id == idNominator)
		{
			client_print(id, "", "%L", id, "GAL_NOM_FAIL_ALREADY", mapName);
		}
		new name[32];
		get_user_name(idNominator, name, 31);
		client_print(id, "", "%L", id, "GAL_NOM_FAIL_SOMEONEELSE", mapName, name);
		client_print(id, "", "%L", id, "GAL_NOM_FAIL_SOMEONEELSE_HLP");
	}
	else
	{
		new nominationCnt;
		new idxNominationOpen;
		new idxNomination;
		new playerNominationMax = min(get_pcvar_num(cvar_nomPlayerAllowance), 5);
		idxNomination = 1;
		while (idxNomination <= playerNominationMax)
		{
			if (0 <= g_nomination[id][idxNomination])
			{
				nominationCnt++;
			}
			else
			{
				idxNominationOpen = idxNomination;
			}
			idxNomination++;
		}
		if (playerNominationMax == nominationCnt)
		{
			new nominatedMaps[256];
			new buffer[32];
			idxNomination = 1;
			while (idxNomination <= playerNominationMax)
			{
				idxMap = g_nomination[id][idxNomination];
				ArrayGetString(g_nominationMap, idxMap, buffer, 31);
				new var1;
				if (idxNomination == 1)
				{
					var1 = 24224;
				}
				else
				{
					var1 = 24228;
				}
				format(nominatedMaps, 255, "%s%s%s", nominatedMaps, var1, buffer);
				idxNomination++;
			}
			client_print(id, "", "%L", id, "GAL_NOM_FAIL_TOOMANY", playerNominationMax, nominatedMaps);
			client_print(id, "", "%L", id, "GAL_NOM_FAIL_TOOMANY_HLP");
		}
		else
		{
			g_nomination[id][idxNominationOpen] = idxMap;
			g_nominationCnt += 1;
			map_announceNomination(id, mapName);
			client_print(id, "", "%L", id, "GAL_NOM_GOOD_HLP");
		}
	}
	return 0;
}

public nomination_list(id)
{
	new idxNomination;
	new idxMap;
	new msg[101];
	new mapCnt;
	new playerNominationMax = min(get_pcvar_num(cvar_nomPlayerAllowance), 5);
	new mapName[32];
	new idPlayer = 1;
	while (idPlayer <= 32)
	{
		idxNomination = 1;
		while (idxNomination <= playerNominationMax)
		{
			idxMap = g_nomination[idPlayer][idxNomination];
			if (0 <= idxMap)
			{
				ArrayGetString(g_nominationMap, idxMap, mapName, 31);
				format(msg, 100, "%s, %s", msg, mapName);
				mapCnt++;
				if (mapCnt == 4)
				{
					client_print(PLUGIN_VERSION, "", "%L: %s", -1, "GAL_NOMINATIONS", msg[2]);
					mapCnt = 0;
					msg[0] = 0;
				}
			}
			idxNomination++;
		}
		idPlayer++;
	}
	if (msg[0])
	{
		client_print(PLUGIN_VERSION, "", "%L: %s", -1, "GAL_NOMINATIONS", msg[2]);
	}
	else
	{
		client_print(PLUGIN_VERSION, "", "%L: %L", -1, "GAL_NOMINATIONS", -1, "NONE");
	}
	return 0;
}

public vote_startDirector(bool:forced)
{
	new choicesLoaded;
	new voteDuration;
	if (g_voteStatus & 4)
	{
		choicesLoaded = vote_loadRunoffChoices();
		voteDuration = get_pcvar_num(cvar_runoffDuration);
		if (get_realplayersnum())
		{
			dbg_log(4, "   [RUNOFF VOTE CHOICES (%i)]", choicesLoaded);
		}
	}
	else
	{
		g_voteStatus = g_voteStatus | 1;
		remove_task(52691153, PLUGIN_VERSION);
		new var1;
		if (forced || get_pcvar_num(cvar_endOfMapVote))
		{
			new nextMap[32];
			formatex(nextMap, 31, "%L", 0, "GAL_NEXTMAP_VOTING");
			map_setNext(nextMap);
		}
		g_pauseMapEndVoteTask = 1;
		g_pauseMapEndManagerTask = 1;
		if (forced)
		{
			g_voteStatus = g_voteStatus | 2;
		}
		choicesLoaded = vote_loadChoices();
		voteDuration = get_pcvar_num(cvar_voteDuration);
		if (get_realplayersnum())
		{
			dbg_log(4, "   [PRIMARY VOTE CHOICES (%i)]", choicesLoaded);
		}
		if (choicesLoaded)
		{
			nomination_clearAll();
		}
	}
	if (choicesLoaded)
	{
		SortCustom2D(g_mapChoice, choicesLoaded, "sort_stringsi", {0}, PLUGIN_VERSION);
		if (get_realplayersnum())
		{
			new dbgChoice;
			while (dbgChoice < choicesLoaded)
			{
				dbg_log(4, "      %i. %s", dbgChoice + 1, g_mapChoice[dbgChoice]);
				dbgChoice++;
			}
		}
		new player[32];
		new playerCnt;
		get_players(player, playerCnt, "ch", 25644);
		new idxPlayer;
		while (idxPlayer < playerCnt)
		{
			g_voted[player[idxPlayer]] = 0;
			idxPlayer++;
		}
		if (!get_pcvar_num(cvar_soundsMute) & 1)
		{
			client_cmd(PLUGIN_VERSION, "spk \"get red(e80) ninety(s45) to check(e20) use bay(s18) mass(e42) cap(s50)\"");
		}
		set_task(1065353216, "vote_countdownPendingVote", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 26060, 7);
		set_task(1091043328, "vote_handleDisplay", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
		if (get_pcvar_num(cvar_voteStatus))
		{
			new arg[3] = {-1,-1,0};
			set_task(floatadd(1065353216, floatadd(1091043328, float(voteDuration))), "vote_display", PLUGIN_VERSION, arg, "", 16948, PLUGIN_VERSION);
			set_task(floatadd(1086324736, floatadd(1091043328, float(voteDuration))), "vote_expire", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
		}
		else
		{
			set_task(floatadd(1077936128, floatadd(1091043328, float(voteDuration))), "vote_expire", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
		}
	}
	else
	{
		client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_VOTE_NOMAPS");
	}
	if (get_realplayersnum())
	{
		dbg_log(4, 26380);
		dbg_log(4, "   [PLAYER CHOICES]");
	}
	return 0;
}

public vote_countdownPendingVote()
{
	static countdown = 7;
	set_hudmessage(PLUGIN_VERSION, 222, 50, -1082130432, 1040522936, PLUGIN_VERSION, 1065353216, 1064346583, PLUGIN_VERSION, PLUGIN_VERSION, -1);
	show_hudmessage(PLUGIN_VERSION, 26468, -1, "GAL_VOTE_COUNTDOWN", countdown);
	if (!get_pcvar_num(cvar_soundsMute) & 2)
	{
		new word[6];
		num_to_word(countdown, word, 5);
		client_cmd(PLUGIN_VERSION, "spk \"fvox/%s\"", word);
	}
	countdown -= 1;
	if (!countdown)
	{
		countdown = 7;
	}
	return 0;
}


/* ERROR! null */
 function "vote_addNominations" (number 54)


/* ERROR! null */
 function "vote_addFiller" (number 55)

vote_loadChoices()
{
	vote_addNominations();
	vote_addFiller();
	return g_choiceCnt;
}

vote_loadRunoffChoices()
{
	new choiceCnt;
	new runoffChoice[2][32] = {
		{
			115, 112, 107, 32, 71, 109, 97, 110, 47, 71, 109, 97, 110, 95, 67, 104, 111, 111, 115, 101, 37, 105, 0, 37, 0, 103, 97, 108, 95, 100, 101, 98
		},
		{
			117, 103, 0, 100, 98, 103, 95, 102, 97, 107, 101, 86, 111, 116, 101, 115, 0, 118, 111, 116, 101, 95, 100, 105, 115, 112, 108, 97, 121, 0, 97, 0
		}
	};
	copy(runoffChoice[0][runoffChoice], 31, g_mapChoice[g_runoffChoice[0]]);
	copy(runoffChoice[1], 31, g_mapChoice[g_runoffChoice[1]]);
	new mapIdx;
	if (g_choiceCnt != g_runoffChoice[0])
	{
		mapIdx++;
		copy(g_mapChoice[mapIdx], 31, runoffChoice[0][runoffChoice]);
		choiceCnt++;
	}
	if (g_choiceCnt != g_runoffChoice[1])
	{
		choiceCnt++;
	}
	copy(g_mapChoice[mapIdx], 31, runoffChoice[1]);
	g_choiceCnt = choiceCnt;
	return choiceCnt;
}

public vote_handleDisplay()
{
	if (!get_pcvar_num(cvar_soundsMute) & 4)
	{
		client_cmd(PLUGIN_VERSION, 28380, random_num(1, 2));
	}
	if (g_voteStatus & 4)
	{
		g_voteDuration = get_pcvar_num(cvar_runoffDuration);
	}
	else
	{
		g_voteDuration = get_pcvar_num(cvar_voteDuration);
	}
	new var1;
	if (get_pcvar_num(cvar_voteStatus) && get_pcvar_num(cvar_voteStatusType) == 2)
	{
		copy(g_voteTallyType, 2, 28472);
	}
	if (get_cvar_num("gal_debug") & 4)
	{
		set_task(1073741824, "dbg_fakeVotes", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
	}
	g_refreshVoteStatus = 1;
	g_voteStatus = g_voteStatus & -33;
	new arg[3];
	arg[0] = 1;
	arg[1] = 0;
	arg[2] = 0;
	if (get_pcvar_num(cvar_voteStatus) == 1)
	{
		set_task(1065353216, "vote_display", PLUGIN_VERSION, arg, "", 28628, g_voteDuration);
	}
	else
	{
		set_task(1065353216, "vote_display", PLUGIN_VERSION, arg, "", 16948, PLUGIN_VERSION);
	}
	return 0;
}

public vote_display(arg[3])
{
	static allKeys = 1023;
	static voteTally[16];
	static voteStatus[512];
	static keys;
	new updateTimeRemaining = arg[0];
	new id = arg[1];
	if (get_realplayersnum())
	{
		decl snuff;
		new var1;
		if (id > 0)
		{
			var1 = g_snuffDisplay[id];
		}
		else
		{
			var1 = -1;
		}
		snuff = var1;
		dbg_log(4, "   [votedisplay()] id: %i  updateTimeRemaining: %i  unsnuffDisplay: %i  g_snuffDisplay: %i  g_refreshVoteStatus: %i  g_choiceCnt: %i  len(g_vote): %i  len(voteStatus): %i", arg[1], arg, arg[2], snuff, g_refreshVoteStatus, g_choiceCnt, strlen(g_vote), strlen(voteStatus));
	}
	new var2;
	if (id > 0 && g_snuffDisplay[id])
	{
		new unsnuffDisplay = arg[2];
		if (unsnuffDisplay)
		{
			g_snuffDisplay[id] = 0;
		}
		return 0;
	}
	decl isVoteOver;
	new var3;
	isVoteOver = updateTimeRemaining == -1 && id == -1;
	new charCnt;
	new var4;
	if (g_refreshVoteStatus || isVoteOver)
	{
		voteStatus[0] = 0;
		keys = 512;
		new voteCnt;
		new allowStay = g_voteStatus & 16;
		new isRunoff = g_voteStatus & 4;
		decl bool:allowExtend;
		new var8;
		allowExtend = !allowStay && ((isRunoff && g_choiceCnt == 1) || (!g_voteStatus & 2 && !isRunoff && get_cvar_float("mp_timelimit") < get_pcvar_float(cvar_extendmapMax)));
		if (get_cvar_num("gal_debug") & 4)
		{
			new var12;
			if (!allowStay && ((isRunoff && g_choiceCnt == 1) || (!isRunoff && get_cvar_float("mp_timelimit") < get_pcvar_float(cvar_extendmapMax))))
			{
			}
		}
		if (isVoteOver)
		{
			charCnt = formatex(voteStatus, 511, "%s%L\n", CLR_YELLOW, 0, "GAL_RESULT");
		}
		else
		{
			charCnt = formatex(voteStatus, 511, "%s%L\n", CLR_YELLOW, 0, "GAL_CHOOSE");
		}
		new choiceIdx;
		while (choiceIdx < g_choiceCnt)
		{
			voteCnt = g_mapVote[choiceIdx];
			vote_getTallyStr(voteTally, 15, voteCnt);
			charCnt = formatex(voteStatus[charCnt], 511 - charCnt, "\n%s%i. %s%s%s", CLR_RED, choiceIdx + 1, CLR_WHITE, g_mapChoice[choiceIdx], voteTally) + charCnt;
			keys = 1 << choiceIdx | keys;
			choiceIdx++;
		}
		new var13;
		if (allowExtend || allowStay)
		{
			if (!(g_voteStatus & 4))
			{
				charCnt = formatex(voteStatus[charCnt], 511 - charCnt, 31828) + charCnt;
			}
			vote_getTallyStr(voteTally, 15, g_mapVote[g_choiceCnt]);
			if (allowExtend)
			{
				charCnt = formatex(voteStatus[charCnt], 511 - charCnt, "\n%s%i. %s%L%s", CLR_RED, g_choiceCnt + 1, CLR_WHITE, 0, "GAL_OPTION_EXTEND", g_currentMap, floatround(get_pcvar_float(cvar_extendmapStep), PLUGIN_VERSION), voteTally) + charCnt;
			}
			else
			{
				charCnt = formatex(voteStatus[charCnt], 511 - charCnt, "\n%s%i. %s%L%s", CLR_RED, g_choiceCnt + 1, CLR_WHITE, 0, "GAL_OPTION_STAY", voteTally) + charCnt;
			}
			keys = 1 << g_choiceCnt | keys;
		}
		if (!g_vote[0])
		{
			new cleanCharCnt = copy(g_vote, 511, voteStatus);
			formatex(g_vote[cleanCharCnt], 511 - cleanCharCnt, "\n\n%s0. %s%L", CLR_RED, CLR_WHITE, 0, "GAL_OPTION_NONE");
		}
		charCnt = formatex(voteStatus[charCnt], 511 - charCnt, "\n\n") + charCnt;
		g_refreshVoteStatus = 0;
	}
	static voteFooter[32];
	new var14;
	if (updateTimeRemaining && get_pcvar_num(cvar_voteExpCountdown))
	{
		charCnt = copy(voteFooter, 31, "\n\n");
		g_voteDuration -= 1;
		if (g_voteDuration <= 10)
		{
			formatex(voteFooter[charCnt], 31 - charCnt, "%s%L: %s%i", CLR_GREY, 0, "GAL_TIMELEFT", CLR_RED, g_voteDuration);
		}
	}
	static menuDirty[512];
	static menuClean[512];
	menuClean[0] = 0;
	menuDirty[0] = 0;
	formatex(menuClean, 511, "%s%s", g_vote, voteFooter);
	if (!isVoteOver)
	{
		formatex(menuDirty, 511, "%s%s", voteStatus, voteFooter);
	}
	else
	{
		formatex(menuDirty, 511, "%s\n\n%s%L", voteStatus, CLR_YELLOW, 0, "GAL_VOTE_ENDED");
	}
	new menuid;
	new menukeys;
	new showStatus = get_pcvar_num(cvar_voteStatus);
	if (0 < id)
	{
		if (showStatus == 1)
		{
			new name[32];
			get_user_name(id, name, 31);
			dbg_log(4, "    [%s (dirty, just voted)]", name);
			dbg_log(4, "        %s", menuDirty);
			get_user_menu(id, menuid, menukeys);
			new var15;
			if (menuid && g_menuChooseMap != menuid)
			{
				show_menu(id, allKeys, menuDirty, max(1, g_voteDuration), MENU_CHOOSEMAP);
			}
		}
	}
	else
	{
		new players[32];
		new playerCnt;
		get_players(players, playerCnt, "ch", 25644);
		new playerIdx;
		while (playerIdx < playerCnt)
		{
			id = players[playerIdx];
			new var16;
			if (g_voted[id] && !isVoteOver)
			{
				if (!playerIdx)
				{
					new name[32];
					get_user_name(id, name, 31);
					dbg_log(4, "    [%s (clean)]", name);
					dbg_log(4, "        %s", menuClean);
				}
				get_user_menu(id, menuid, menukeys);
				new var17;
				if (menuid && g_menuChooseMap != menuid)
				{
					show_menu(id, keys, menuClean, g_voteDuration, MENU_CHOOSEMAP);
				}
			}
			else
			{
				new var18;
				if ((isVoteOver && showStatus) || (showStatus == 1 && g_voted[id]))
				{
					if (!playerIdx)
					{
						new name[32];
						get_user_name(id, name, 31);
						dbg_log(4, "    [%s (dirty)]", name);
						dbg_log(4, "        %s", menuDirty);
					}
					get_user_menu(id, menuid, menukeys);
					new var21;
					if (menuid && g_menuChooseMap != menuid)
					{
						new var22;
						if (isVoteOver)
						{
							var22 = 5;
						}
						else
						{
							var22 = max(1, g_voteDuration);
						}
						show_menu(id, allKeys, menuDirty, var22, MENU_CHOOSEMAP);
					}
				}
			}
			if (id == 1)
			{
				dbg_log(4, 37072);
			}
			playerIdx++;
		}
	}
	return 0;
}

vote_getTallyStr(voteTally[], voteTallyLen, voteCnt)
{
	new var1;
	if (voteCnt && get_pcvar_num(cvar_voteStatusType) == 2)
	{
		voteCnt = percent(voteCnt, g_votesCast);
	}
	new var2;
	if (get_pcvar_num(cvar_voteStatus) && voteCnt)
	{
		formatex(voteTally, voteTallyLen, " %s(%i%s)", CLR_GREY, voteCnt, g_voteTallyType);
	}
	else
	{
		voteTally[0] = 0;
	}
	return 0;
}

public vote_expire()
{
	g_voteStatus = g_voteStatus | 32;
	if (get_realplayersnum())
	{
		dbg_log(4, 37116);
		dbg_log(4, "   [VOTE RESULT]");
		new voteTally[16];
		new idxChoice;
		while (idxChoice <= g_choiceCnt)
		{
			vote_getTallyStr(voteTally, 15, g_mapVote[idxChoice]);
			dbg_log(4, "      %2i/%3i  %i. %s", g_mapVote[idxChoice], voteTally, idxChoice, g_mapChoice[idxChoice]);
			idxChoice++;
		}
		dbg_log(4, 37276);
	}
	g_vote[0] = 0;
	new firstPlaceVoteCnt;
	new secondPlaceVoteCnt;
	new totalVotes;
	new idxChoice;
	while (idxChoice <= g_choiceCnt)
	{
		totalVotes = g_mapVote[idxChoice][totalVotes];
		if (g_mapVote[idxChoice] > firstPlaceVoteCnt)
		{
			secondPlaceVoteCnt = firstPlaceVoteCnt;
			firstPlaceVoteCnt = g_mapVote[idxChoice];
		}
		else
		{
			if (g_mapVote[idxChoice] > secondPlaceVoteCnt)
			{
				secondPlaceVoteCnt = g_mapVote[idxChoice];
			}
		}
		idxChoice++;
	}
	new firstPlace[9];
	new firstPlaceCnt;
	new secondPlace[9];
	new secondPlaceCnt;
	new idxChoice;
	while (idxChoice <= g_choiceCnt)
	{
		if (firstPlaceVoteCnt == g_mapVote[idxChoice])
		{
			firstPlaceCnt++;
			firstPlace[firstPlaceCnt] = idxChoice;
		}
		else
		{
			if (secondPlaceVoteCnt == g_mapVote[idxChoice])
			{
				secondPlaceCnt++;
				secondPlace[secondPlaceCnt] = idxChoice;
			}
		}
		idxChoice++;
	}
	new idxWinner;
	if (firstPlaceVoteCnt)
	{
		new var1;
		if (get_pcvar_num(cvar_runoffEnabled) && !g_voteStatus & 4)
		{
			if (totalVotes / 2 >= firstPlaceVoteCnt)
			{
				client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_RUNOFF_REQUIRED");
				if (!get_pcvar_num(cvar_soundsMute) & 8)
				{
					client_cmd(PLUGIN_VERSION, "spk \"run officer(e40) voltage(e30) accelerating(s70) is required\"");
				}
				g_voteStatus = g_voteStatus | 4;
				new choice1Idx;
				new choice2Idx;
				if (firstPlaceCnt > 2)
				{
					choice1Idx = random_num(PLUGIN_VERSION, firstPlaceCnt + -1);
					choice2Idx = random_num(PLUGIN_VERSION, firstPlaceCnt + -1);
					if (choice1Idx == choice2Idx)
					{
						new var2;
						if (firstPlaceCnt + -1 == choice2Idx)
						{
							var2 = 0;
						}
						else
						{
							choice2Idx++;
							var2 = choice2Idx;
						}
						choice2Idx = var2;
					}
					g_runoffChoice[0] = firstPlace[choice1Idx];
					g_runoffChoice[1] = firstPlace[choice2Idx];
					client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_RESULT_TIED1", firstPlaceCnt);
				}
				else
				{
					if (firstPlaceCnt == 2)
					{
						g_runoffChoice[0] = firstPlace[0];
						g_runoffChoice[1] = firstPlace[1];
					}
					if (secondPlaceCnt == 1)
					{
						g_runoffChoice[0] = firstPlace[0];
						g_runoffChoice[1] = secondPlace[0];
					}
					g_runoffChoice[0] = firstPlace[0];
					g_runoffChoice[1] = secondPlace[random_num(PLUGIN_VERSION, secondPlaceCnt + -1)];
					client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_RESULT_TIED2", secondPlaceCnt);
				}
				vote_resetStats();
				set_task(1084227584, "vote_startDirector", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
				return 0;
			}
		}
		if (firstPlaceCnt > 1)
		{
			idxWinner = firstPlace[random_num(PLUGIN_VERSION, firstPlaceCnt + -1)];
			client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_WINNER_TIED", firstPlaceCnt);
		}
		else
		{
			idxWinner = firstPlace[0];
		}
		if (g_choiceCnt == idxWinner)
		{
			if (get_pcvar_num(cvar_endOfMapVote))
			{
				new nextMap[32];
				formatex(nextMap, 31, "%L", 0, "GAL_NEXTMAP_UNKNOWN");
				map_setNext(nextMap);
			}
			g_pauseMapEndVoteTask = 0;
			if (g_voteStatus & 16)
			{
				client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_WINNER_STAY");
				vote_resetStats();
				g_voteStatus = g_voteStatus & -17;
			}
			else
			{
				client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_WINNER_EXTEND", floatround(get_pcvar_float(cvar_extendmapStep), PLUGIN_VERSION));
				map_extend();
			}
		}
		else
		{
			map_setNext(g_mapChoice[idxWinner]);
			server_exec();
			client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_NEXTMAP", g_mapChoice[idxWinner]);
			g_voteStatus = g_voteStatus | 8;
		}
	}
	else
	{
		idxWinner = random_num(PLUGIN_VERSION, g_choiceCnt + -1);
		map_setNext(g_mapChoice[idxWinner]);
		client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_WINNER_RANDOM", g_mapChoice[idxWinner]);
		g_voteStatus = g_voteStatus | 8;
	}
	g_refreshVoteStatus = 1;
	new playerCnt = get_realplayersnum();
	g_voteStatus = g_voteStatus & -2;
	if (g_handleMapChange)
	{
		new var4;
		if ((g_voteStatus & 2 || (playerCnt == 1 && idxWinner < g_choiceCnt) || playerCnt) && !get_cvar_num("gal_debug") & 4)
		{
			set_task(1073741824, "map_manageEnd", PLUGIN_VERSION, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
		}
		g_pauseMapEndManagerTask = 0;
	}
	return 0;
}

map_extend()
{
	dbg_log(2, "%32s mp_timelimit: %f  g_rtvWait: %f  extendmapStep: %f", "map_extend(in)", get_cvar_float("mp_timelimit"), g_rtvWait, get_pcvar_float(cvar_extendmapStep));
	if (g_rtvWait)
	{
		g_rtvWait = floatadd(get_cvar_float("mp_timelimit"), g_rtvWait);
	}
	set_cvar_float("mp_timelimit", floatadd(get_cvar_float("mp_timelimit"), get_pcvar_float(cvar_extendmapStep)));
	server_exec();
	vote_resetStats();
	g_voteStatus = g_voteStatus & -5;
	dbg_log(2, "%32s mp_timelimit: %f  g_rtvWait: %f  extendmapStep: %f", "map_extend(out)", get_cvar_float("mp_timelimit"), g_rtvWait, get_pcvar_float(cvar_extendmapStep));
	return 0;
}

vote_resetStats()
{
	g_votesCast = 0;
	arrayset(g_mapVote, PLUGIN_VERSION, 9);
	arrayset(g_rockedVote, PLUGIN_VERSION, 33);
	g_rockedVoteCnt = 0;
	return 0;
}

map_isInMenu(map[])
{
	new idxChoice;
	while (idxChoice < g_choiceCnt)
	{
		if (equal(map, g_mapChoice[idxChoice], PLUGIN_VERSION))
		{
			return 1;
		}
		idxChoice++;
	}
	return 0;
}

prefix_isInMenu(map[])
{
	if (get_pcvar_num(cvar_voteUniquePrefixes))
	{
		new tentativePrefix[8];
		new existingPrefix[8];
		new junk[8];
		strtok(map, tentativePrefix, 7, junk, 7, "", 1);
		new idxChoice;
		while (idxChoice < g_choiceCnt)
		{
			strtok(g_mapChoice[idxChoice], existingPrefix, 7, junk, 7, "", 1);
			if (equal(tentativePrefix, existingPrefix, PLUGIN_VERSION))
			{
				return 1;
			}
			idxChoice++;
		}
	}
	return 0;
}

map_isTooRecent(map[])
{
	if (get_pcvar_num(cvar_banRecent))
	{
		new idxBannedMap;
		while (idxBannedMap < g_cntRecentMap)
		{
			if (equal(map, g_recentMap[idxBannedMap], PLUGIN_VERSION))
			{
				return 1;
			}
			idxBannedMap++;
		}
	}
	return 0;
}

public vote_handleChoice(id, key)
{
	if (g_voteStatus & 32)
	{
		client_cmd(id, "\"slot%i\"", key + 1);
		return 0;
	}
	g_snuffDisplay[id] = 1;
	if (g_voted[id])
	{
		client_cmd(id, "\"slot%i\"", key + 1);
	}
	else
	{
		new name[32];
		if (get_pcvar_num(cvar_voteAnnounceChoice))
		{
			get_user_name(id, name, 31);
		}
		get_user_name(id, name, 31);
		if (key == 9)
		{
			dbg_log(4, "      %-32s (none)", name);
			if (get_pcvar_num(cvar_voteAnnounceChoice))
			{
				client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_CHOICE_NONE_ALL", name);
			}
			else
			{
				client_print(id, "", "%L", id, "GAL_CHOICE_NONE");
			}
		}
		else
		{
			g_votesCast += 1;
			if (g_choiceCnt == key)
			{
				if (g_voted[id])
				{
				}
				else
				{
					dbg_log(4, "      %-32s (extend)", name);
					if (get_pcvar_num(cvar_voteAnnounceChoice))
					{
						client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_CHOICE_EXTEND_ALL", name);
					}
					client_print(id, "", "%L", id, "GAL_CHOICE_EXTEND");
				}
			}
			else
			{
				dbg_log(4, "      %-32s %s", name, g_mapChoice[key]);
				if (get_pcvar_num(cvar_voteAnnounceChoice))
				{
					client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_CHOICE_MAP_ALL", name, g_mapChoice[key]);
				}
				client_print(id, "", "%L", id, "GAL_CHOICE_MAP", g_mapChoice[key]);
			}
			new voteWeight = get_pcvar_num(cvar_voteWeight);
			new var1;
			if (voteWeight > 1 && has_flag(id, g_voteWeightFlags))
			{
				new var2 = g_mapVote[key];
				var2 = var2[voteWeight];
				g_votesCast = voteWeight + -1 + g_votesCast;
				client_print(id, "", "%L", id, "GAL_VOTE_WEIGHTED", voteWeight);
			}
			else
			{
				g_mapVote[key]++;
			}
		}
		g_voted[id] = 1;
		g_refreshVoteStatus = 1;
	}
	if (get_pcvar_num(cvar_voteStatus) == 1)
	{
		new arg[3];
		arg[0] = 0;
		arg[1] = id;
		arg[2] = 1;
		set_task(1036831949, "vote_display", PLUGIN_VERSION, arg, "", 16948, PLUGIN_VERSION);
	}
	return 0;
}

public map_change()
{
	map_restoreOriginalTimeLimit();
	new map[32];
	get_cvar_string("amx_nextmap", map, 31);
	if (!is_map_valid(map))
	{
		copy(map, 31, g_currentMap);
	}
	server_cmd("changelevel %s", map);
	return 0;
}

Float:map_getMinutesElapsed()
{
	dbg_log(2, "%32s mp_timelimit: %f", "map_getMinutesElapsed(in/out)", get_cvar_float("mp_timelimit"));
	return floatsub(get_cvar_float("mp_timelimit"), floatdiv(float(get_timeleft()), 1114636288));
}

public vote_rock(id)
{
	if (g_voteStatus & 16)
	{
		client_print(id, "", "%L", id, "GAL_ROCK_FAIL_PENDINGVOTE");
		return 0;
	}
	new Float:minutesElapsed = map_getMinutesElapsed();
	new var1;
	if (get_realplayersnum() == 1 && minutesElapsed > floatmin(2.0, g_rtvWait))
	{
		vote_startDirector(true);
		return 0;
	}
	if (g_rtvWait)
	{
		if (minutesElapsed < g_rtvWait)
		{
			client_print(id, "", "%L", id, "GAL_ROCK_FAIL_TOOSOON", floatround(floatsub(g_rtvWait, minutesElapsed), 2));
			return 0;
		}
	}
	if (g_voteStatus & 1)
	{
		client_print(id, "", "%L", id, "GAL_ROCK_FAIL_INPROGRESS");
		return 0;
	}
	if (g_voteStatus & 8)
	{
		client_print(id, "", "%L", id, "GAL_ROCK_FAIL_VOTEOVER");
		return 0;
	}
	new rocksNeeded = vote_getRocksNeeded();
	if (g_rockedVote[id])
	{
		client_print(id, "", "%L", id, "GAL_ROCK_FAIL_ALREADY", rocksNeeded - g_rockedVoteCnt);
		rtv_remind(id + 52691153);
		return 0;
	}
	g_rockedVote[id] = 1;
	client_print(id, "", "%L", id, "GAL_ROCK_SUCCESS");
	if (task_exists(52691153, PLUGIN_VERSION))
	{
		remove_task(52691153, PLUGIN_VERSION);
	}
	g_rockedVoteCnt += 1;
	if (g_rockedVoteCnt >= rocksNeeded)
	{
		client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_ROCK_ENOUGH");
		vote_startDirector(true);
	}
	else
	{
		rtv_remind(52691153);
		if (get_pcvar_num(cvar_rtvReminder))
		{
			set_task(floatmul(1114636288, get_pcvar_float(cvar_rtvReminder)), "rtv_remind", 52691153, 16944, PLUGIN_VERSION, 41364, PLUGIN_VERSION);
		}
	}
	return 0;
}

vote_unrock(id)
{
	if (g_rockedVote[id])
	{
		g_rockedVote[id] = 0;
		g_rockedVoteCnt -= 1;
	}
	return 0;
}

vote_getRocksNeeded()
{
	return floatround(floatmul(get_pcvar_float(cvar_rtvRatio), float(get_realplayersnum())), 2);
}

public rtv_remind(param)
{
	new who = param + -52691153;
	client_print(who, "", "%L", -1, "GAL_ROCK_NEEDMORE", vote_getRocksNeeded() - g_rockedVoteCnt);
	return 0;
}

public cmd_listmaps(id)
{
	map_listAll(id);
	return 1;
}

public cmd_HL1_votemap(id)
{
	if (get_pcvar_num(cvar_cmdVotemap))
	{
		return 0;
	}
	con_print(id, "%L", id, "GAL_DISABLED");
	return 1;
}

public cmd_HL1_listmaps(id)
{
	switch (get_pcvar_num(cvar_cmdListmaps))
	{
		case 0:
		{
			con_print(id, "%L", id, "GAL_DISABLED");
		}
		case 2:
		{
			map_listAll(id);
		}
		default:
		{
			return 0;
		}
	}
	return 1;
}

map_listAll(id)
{
	static lastMapDisplayed[33][2];
	new userid = get_user_userid(id);
	if (lastMapDisplayed[id][0] != userid)
	{
		lastMapDisplayed[id][0] = 0;
	}
	new command[32];
	read_argv(PLUGIN_VERSION, command, 31);
	new arg1[8];
	new start;
	new mapCount = get_pcvar_num(cvar_listmapsPaginate);
	if (mapCount)
	{
		if (read_argv(1, arg1, 7))
		{
			if (arg1[0] == 42)
			{
				if (lastMapDisplayed[id][0])
				{
					start = lastMapDisplayed[id][1] + 1;
				}
				else
				{
					start = 1;
				}
			}
			else
			{
				start = str_to_num(arg1);
			}
		}
		else
		{
			start = 1;
		}
		new var1;
		if (id && read_argc() == 3 && read_argv(2, arg1, 7))
		{
			mapCount = str_to_num(arg1);
		}
	}
	if (start < 1)
	{
		start = 1;
	}
	if (start >= g_nominationMapCnt)
	{
		start = g_nominationMapCnt + -1;
	}
	decl end;
	new var2;
	if (mapCount)
	{
		var2 = mapCount + start - 1;
	}
	else
	{
		var2 = g_nominationMapCnt;
	}
	end = var2;
	if (end > g_nominationMapCnt)
	{
		end = g_nominationMapCnt;
	}
	lastMapDisplayed[id][0] = userid;
	lastMapDisplayed[id][1] = end + -1;
	con_print(id, "\n----- %L -----", id, "GAL_LISTMAPS_TITLE", g_nominationMapCnt);
	new nominated[64];
	new nominator_id;
	new name[32];
	new mapName[32];
	new idx = start + -1;
	while (idx < end)
	{
		nominator_id = nomination_getPlayer(idx);
		if (nominator_id)
		{
			get_user_name(nominator_id, name, 31);
			formatex(nominated, 63, "%L", id, "GAL_NOMINATEDBY", name);
		}
		else
		{
			nominated[0] = 0;
		}
		ArrayGetString(g_nominationMap, idx, mapName, 31);
		con_print(id, "%3i: %s  %s", idx + 1, mapName, nominated);
		idx++;
	}
	new var3;
	if (mapCount && mapCount < g_nominationMapCnt)
	{
		con_print(id, "----- %L -----", id, "GAL_LISTMAPS_SHOWING", start, idx, g_nominationMapCnt);
		if (end < g_nominationMapCnt)
		{
			con_print(id, "----- %L -----", id, "GAL_LISTMAPS_MORE", command, end + 1, command);
		}
	}
	return 0;
}

con_print(id, message[])
{
	new consoleMessage[256];
	vformat(consoleMessage, 255, message, "");
	if (id)
	{
		new authid[32];
		get_user_authid(id, authid, 31);
		if (!equal(authid, "STEAM_ID_LAN", PLUGIN_VERSION))
		{
			console_print(id, consoleMessage);
			return 0;
		}
	}
	server_print(consoleMessage);
	return 0;
}

public client_disconnect(id)
{
	g_voted[id] = 0;
	vote_unrock(id);
	new playerNominationMax = min(get_pcvar_num(cvar_nomPlayerAllowance), 5);
	new nominatedMaps[256];
	new nominationCnt;
	new idxMap;
	new mapName[32];
	new idxNomination = 1;
	while (idxNomination <= playerNominationMax)
	{
		idxMap = g_nomination[id][idxNomination];
		if (0 <= idxMap)
		{
			ArrayGetString(g_nominationMap, idxMap, mapName, 31);
			nominationCnt++;
			format(nominatedMaps, 255, "%s%s, ", nominatedMaps, mapName);
			g_nomination[id][idxNomination] = -1;
		}
		idxNomination++;
	}
	if (nominationCnt)
	{
		nominatedMaps[strlen(nominatedMaps) - 2] = 0;
		nomination_announceCancellation(nominatedMaps);
	}
	new dbg_playerCnt = get_realplayersnum() - 1;
	dbg_log(2, "%32s dbg_playerCnt:%i", "client_disconnect()", dbg_playerCnt);
	if (!dbg_playerCnt)
	{
		srv_handleEmpty();
	}
	return 0;
}

public client_connect(id)
{
	set_pcvar_num(cvar_emptyCycle, PLUGIN_VERSION);
	vote_unrock(id);
	return 0;
}

public client_putinserver(id)
{
	new var1;
	if (g_voteStatus & 16 && !is_user_bot(id) && !is_user_hltv(id))
	{
		set_task(1101004800, "srv_announceEarlyVote", id, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
	}
	return 0;
}

srv_handleEmpty()
{
	dbg_log(2, "%32s mp_timelimit: %f  g_originalTimelimit: %f", "srv_handleEmpty(in)", get_cvar_float("mp_timelimit"), g_originalTimelimit);
	if (g_originalTimelimit != get_cvar_float("mp_timelimit"))
	{
		map_restoreOriginalTimeLimit();
	}
	new var1;
	if (g_isUsingEmptyCycle && g_emptyMapCnt)
	{
		srv_startEmptyCountdown();
	}
	dbg_log(2, "%32s mp_timelimit: %f  g_originalTimelimit: %f", "srv_handleEmpty(out)", get_cvar_float("mp_timelimit"), g_originalTimelimit);
	return 0;
}

public srv_announceEarlyVote(id)
{
	if (is_user_connected(id))
	{
		new text[101];
		formatex(text, 100, "\x04%L", id, "GAL_VOTE_EARLY");
		print_color(id, text);
	}
	return 0;
}

public srv_initEmptyCheck()
{
	if (get_pcvar_num(cvar_emptyWait))
	{
		new var1;
		if (get_realplayersnum() && !get_pcvar_num(cvar_emptyCycle))
		{
			srv_startEmptyCountdown();
		}
		g_isUsingEmptyCycle = true;
	}
	return 0;
}

srv_startEmptyCountdown()
{
	new waitMinutes = get_pcvar_num(cvar_emptyWait);
	if (waitMinutes)
	{
		set_task(float(waitMinutes * 60), "srv_startEmptyCycle", 98176977, 16944, PLUGIN_VERSION, 16948, PLUGIN_VERSION);
	}
	return 0;
}

public srv_startEmptyCycle()
{
	set_pcvar_num(cvar_emptyCycle, 1);
	new nextMap[32];
	new mapIdx = map_getNext(g_emptyCycleMap, g_currentMap, nextMap);
	map_setNext(nextMap);
	if (mapIdx == -1)
	{
		map_change();
	}
	return 0;
}

nomination_announceCancellation(nominations[])
{
	client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_CANCEL_SUCCESS", nominations);
	return 0;
}

nomination_clearAll()
{
	new idxPlayer = 1;
	while (idxPlayer <= 32)
	{
		new idxNomination = 1;
		while (idxNomination <= 5)
		{
			g_nomination[idxPlayer][idxNomination] = -1;
			idxNomination++;
		}
		idxPlayer++;
	}
	g_nominationCnt = 0;
	return 0;
}

map_announceNomination(id, map[])
{
	new name[32];
	get_user_name(id, name, 31);
	client_print(PLUGIN_VERSION, "", "%L", -1, "GAL_NOM_SUCCESS", name, map);
	return 0;
}

public sort_stringsi(elem1[], elem2[], array[], data[], data_size)
{
	return strcmp(elem1, elem2, 1);
}

get_realplayersnum()
{
	new players[32];
	new playerCnt;
	get_players(players, playerCnt, "ch", 25644);
	return playerCnt;
}

percent(is, of)
{
	new var1;
	if (of)
	{
		var1 = floatround(floatmul(floatdiv(float(is), float(of)), 1120403456), PLUGIN_VERSION);
	}
	else
	{
		var1 = 0;
	}
	return var1;
}

print_color(id, text[])
{
	message_begin(1, get_user_msgid("SayText"), 43916, id);
	write_byte(id);
	write_string(text);
	message_end();
	return 0;
}

map_restoreOriginalTimeLimit()
{
	dbg_log(2, "%32s mp_timelimit: %f  g_originalTimelimit: %f", "map_restoreOriginalTimeLimit(in)", get_cvar_float("mp_timelimit"), g_originalTimelimit);
	if (-1.0 != g_originalTimelimit)
	{
		server_cmd("mp_timelimit %f", g_originalTimelimit);
		server_exec();
	}
	dbg_log(2, "%32s mp_timelimit: %f  g_originalTimelimit: %f", "map_restoreOriginalTimeLimit(out)", get_cvar_float("mp_timelimit"), g_originalTimelimit);
	return 0;
}

dbg_log(mode, text[])
{
	new dbg = get_cvar_num("gal_debug");
	if (dbg & mode)
	{
		new formattedText[1024];
		format_args(formattedText, 1023, 1);
		new Float:gameTime = get_gametime();
		log_to_file("_galileo.log", "{%3.4f} %s", gameTime, formattedText);
		new var1;
		if (dbg & 1 && formattedText[0])
		{
			new isFound = 1;
			while (isFound)
			{
				isFound = replace(formattedText, 1023, 44876, 44884);
			}
			log_message("\"<><><>\" triggered \"amx_chat\" (text \"[GAL] %s\")", formattedText);
		}
	}
	if (text[0])
	{
		return 0;
	}
	return 0;
}

